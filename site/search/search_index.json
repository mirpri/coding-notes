{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This is a collection of my personal coding notes, tips, and best practices. Here, you'll find various topics related to programming, including tutorials, code snippets, and problem-solving techniques. Feel free to explore and learn along with me! \ud83d\udc49 Start exploring by navigating to the sections from the navigation bar on the top of the page. Support me \ud83d\udc97 If you find my notes helpful, please consider following me on GitHub and starring my repository . Your support helps me to keep creating and sharing more valuable content.","title":"Welcome"},{"location":"#welcome","text":"This is a collection of my personal coding notes, tips, and best practices. Here, you'll find various topics related to programming, including tutorials, code snippets, and problem-solving techniques. Feel free to explore and learn along with me! \ud83d\udc49 Start exploring by navigating to the sections from the navigation bar on the top of the page.","title":"Welcome"},{"location":"#support-me","text":"\ud83d\udc97 If you find my notes helpful, please consider following me on GitHub and starring my repository . Your support helps me to keep creating and sharing more valuable content.","title":"Support me"},{"location":"C-notes/cpp-features/","text":"C++ Features This section focuses on features unique to c++ \u4f20\u9012\u5f15\u7528\u7c7b\u578b\u7684\u53c2\u6570 \u51fd\u6570\u539f\u578b\u4e2d\uff0c\u53ef\u5b9a\u4e49 \u5f15\u7528\u7c7b\u578b \u53c2\u6570\u3002 void work(int &x) { x = x + 10; // \u4fee\u6539 x \u7684\u503c } int main() { int a = 5; work(a); // \u4f20\u9012 a \u7684\u5f15\u7528\u7ed9 work cout<<a; // a\u4e3a15 return 0; } \u5f15\u7528\u7c7b\u578b\u7684\u53c2\u6570\u5728\u51fd\u6570\u8c03\u7528\u65f6\u4e0d\u4f1a\u521b\u5efa\u53c2\u6570\u7684\u526f\u672c\uff0c\u800c\u662f\u76f4\u63a5\u5f15\u7528\u8c03\u7528\u65f6\u4f20\u9012\u7684\u5b9e\u53c2\u3002\u8fd9\u6837\uff0c\u53ef\u4ee5\u907f\u514d\u62f7\u8d1d\u53c2\u6570\u5e26\u6765\u7684\u5f00\u9500\uff0c\u4e14\u80fd\u5728\u51fd\u6570\u4e2d\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u53d8\u91cf\u7684\u503c\uff0c\u4e5f\u65e0\u9700\u4f7f\u7528\u6307\u9488\u95f4\u63a5\u8bbf\u95ee\u3002 \u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af \u7b80\u6d01\u7684\u904d\u5386\u6570\u7ec4\u548c\u5176\u5b83\u5bb9\u5668 (C++ 11) int arr[]={1,2,3,4,5}; for(int i:arr){ cout<<i<<' '; } \u8fd9\u79cd\u65b9\u5f0f\u9ed8\u8ba4\u662f\u503c\u4f20\u9012\uff0c\u610f\u5473\u7740\u5faa\u73af\u5185\u5bf9 i \u7684\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u539f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u3002\u5982\u679c\u9700\u8981\u4fee\u6539\u539f\u6570\u7ec4\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u5f15\u7528\uff1a for (int &i : arr) { i++; // \u8fd9\u4f1a\u4fee\u6539 arr \u4e2d\u7684\u5143\u7d20 } \u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af\u9002\u7528\u4e8e\uff1a - \u666e\u901a\u6570\u7ec4\uff08\u5982 int arr[5]\uff09 - \u6807\u51c6\u5bb9\u5668\uff08\u5982 vector, list, map \u7b49\uff09 - \u4efb\u4f55\u63d0\u4f9b\u4e86 begin() \u548c end() \u65b9\u6cd5\u7684\u7c7b\u578b","title":"C++ Features"},{"location":"C-notes/cpp-features/#c-features","text":"This section focuses on features unique to c++","title":"C++ Features"},{"location":"C-notes/cpp-features/#_1","text":"\u51fd\u6570\u539f\u578b\u4e2d\uff0c\u53ef\u5b9a\u4e49 \u5f15\u7528\u7c7b\u578b \u53c2\u6570\u3002 void work(int &x) { x = x + 10; // \u4fee\u6539 x \u7684\u503c } int main() { int a = 5; work(a); // \u4f20\u9012 a \u7684\u5f15\u7528\u7ed9 work cout<<a; // a\u4e3a15 return 0; } \u5f15\u7528\u7c7b\u578b\u7684\u53c2\u6570\u5728\u51fd\u6570\u8c03\u7528\u65f6\u4e0d\u4f1a\u521b\u5efa\u53c2\u6570\u7684\u526f\u672c\uff0c\u800c\u662f\u76f4\u63a5\u5f15\u7528\u8c03\u7528\u65f6\u4f20\u9012\u7684\u5b9e\u53c2\u3002\u8fd9\u6837\uff0c\u53ef\u4ee5\u907f\u514d\u62f7\u8d1d\u53c2\u6570\u5e26\u6765\u7684\u5f00\u9500\uff0c\u4e14\u80fd\u5728\u51fd\u6570\u4e2d\u4f1a\u76f4\u63a5\u4fee\u6539\u539f\u53d8\u91cf\u7684\u503c\uff0c\u4e5f\u65e0\u9700\u4f7f\u7528\u6307\u9488\u95f4\u63a5\u8bbf\u95ee\u3002","title":"\u4f20\u9012\u5f15\u7528\u7c7b\u578b\u7684\u53c2\u6570"},{"location":"C-notes/cpp-features/#for","text":"\u7b80\u6d01\u7684\u904d\u5386\u6570\u7ec4\u548c\u5176\u5b83\u5bb9\u5668 (C++ 11) int arr[]={1,2,3,4,5}; for(int i:arr){ cout<<i<<' '; } \u8fd9\u79cd\u65b9\u5f0f\u9ed8\u8ba4\u662f\u503c\u4f20\u9012\uff0c\u610f\u5473\u7740\u5faa\u73af\u5185\u5bf9 i \u7684\u4fee\u6539\u4e0d\u4f1a\u5f71\u54cd\u539f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u3002\u5982\u679c\u9700\u8981\u4fee\u6539\u539f\u6570\u7ec4\u5143\u7d20\uff0c\u53ef\u4ee5\u4f7f\u7528\u5f15\u7528\uff1a for (int &i : arr) { i++; // \u8fd9\u4f1a\u4fee\u6539 arr \u4e2d\u7684\u5143\u7d20 } \u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af\u9002\u7528\u4e8e\uff1a - \u666e\u901a\u6570\u7ec4\uff08\u5982 int arr[5]\uff09 - \u6807\u51c6\u5bb9\u5668\uff08\u5982 vector, list, map \u7b49\uff09 - \u4efb\u4f55\u63d0\u4f9b\u4e86 begin() \u548c end() \u65b9\u6cd5\u7684\u7c7b\u578b","title":"\u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af"},{"location":"C-notes/elegant-codes/","text":"Elegant Codes \ud83d\udd90\ufe0f This is a collection of perfectly written codes to perform a specific task. Each code snippet is designed to be efficient, easy to understand, and reusable. These examples will probably help you improve your coding skills and find a better practice to implement a function. If you have any questions or suggestions, feel free to share it with me! Hanoi \u7ecf\u5178\u7684\u6c49\u8bfa\u5854\u95ee\u9898(c++) #include <bits/stdc++.h> using namespace std; int N; int cnt=0; int rod[3]={0,0,0}; char trans[]={'A','B','C'}; void movedisk(int n, int fr, int mi, int to){ if (n==1){//\u8fb9\u754c\u6761\u4ef6 rod[fr]--;rod[to]++; cnt++; cout<<\"step \"+to_string(cnt)+\": movedisk \"+trans[fr]+\" to \"+trans[to]<<\" [\"+to_string(rod[0])+\"] [\"+to_string(rod[1])+\"] [\"+to_string(rod[2])+\"]\"<<endl; return; } movedisk(n-1,fr,to,mi); movedisk(1,fr,mi,to); movedisk(n-1,mi,fr,to);//\u6bcf\u589e\u52a0\u4e00\u4e2adisk\uff0c\u9700\u8981\u7684\u6b21\u6570\u4e3a\u539f\u6765*2+1. return; } int main() { cout<<\"number of disks: \"; cin>>N; rod[0]=N; movedisk(N,0,1,2); return 0; } \u6768\u8f89\u4e09\u89d2 \u6253\u5370\u6768\u8f89\u4e09\u89d2 #include <stdio.h> int countWid(int num){ return 4*num+1; } void giveSpace(int x){ if(x/100)printf(\" \"); else if(x/10)printf(\" \"); else printf(\" \"); } int C(int i,int j){ if(j==0)return 1; return C(i,j-1)*(i-j+1)/j; } int main() { int N; scanf(\"%d\",&N); int center=countWid(N)/2+1; for (int i = 0; i <= N; i++) { int spaces=center-countWid(i)/2-1; for (int j = 0; j < spaces; j++)printf(\" \"); for (int j = 0; j <= i; j++) { int tmp=C(i,j); printf(\"%d\",tmp); giveSpace(tmp); } if(i!=N)printf(\"\\n\"); } return 0; } \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u4e00\u79cd\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c e.g. 4 -13 5 / + answer: 2 #include <stdio.h> int stoi(char *s){ int ans=0, sgn=1; if(s[0]=='-'){ sgn=-1; } else ans=s[0]-'0'; for (int i = 1; s[i]!='\\0'; i++){ ans=ans*10+s[i]-'0'; } return sgn*ans; } int main() { char in[20]; int stack[10010]; int tail=-1; int a,b; while (scanf(\"%s\",in)!=EOF) { switch (in[0]) { case '+': a=stack[tail--], b=stack[tail--]; stack[++tail]=a+b; break; case '-': if(in[1]!='\\0'){ stack[++tail]=stoi(in); break; } a=stack[tail--], b=stack[tail--]; stack[++tail]=b-a; break; case '*': a=stack[tail--], b=stack[tail--]; stack[++tail]=a*b; break; case '/': a=stack[tail--], b=stack[tail--]; stack[++tail]=b/a; break; default: stack[++tail]=stoi(in); break; } } printf(\"%d\",(int)stack[0]); return 0; } \u77e9\u9635\u8fd0\u7b97 \u4f18\u96c5\u7684\u4f7f\u7528\u8fd0\u7b97\u7b26\u8fdb\u884c\u77e9\u9635\u8fd0\u7b97(c++) #include <bits/stdc++.h> using namespace std; struct matrix { int s_i, s_j; vector<vector<double>> data; }; struct vectors { int s; vector<double> data; }; matrix operator*(const matrix& a, const matrix& b) { assert(a.s_j == b.s_i); matrix c; c.s_i = a.s_i; c.s_j = b.s_j; for (int i = 0; i < c.s_i; i++) { c.data.push_back(vector<double>()); for (int j = 0; j < c.s_j; j++) { double sum = 0; for (int k = 0; k < a.s_j; k++) { sum += a.data[i][k] * b.data[k][j]; } c.data[i].push_back(sum); } } return c; } matrix operator*(const vectors& a, const matrix& b) { matrix c; c.s_i = b.s_i; c.s_j = b.s_j; for (int i = 0; i < b.s_i; i++) { c.data.push_back(vector<double>()); for (int j = 0; j < b.s_j; j++) { c.data[i].push_back(a.data[i] * b.data[i][j]); } } return c; } matrix operator~(const matrix& a) { // Transpose matrix b; b.s_i = a.s_j; b.s_j = a.s_i; for (int i = 0; i < b.s_i; i++) { b.data.push_back(vector<double>()); for (int j = 0; j < b.s_j; j++) { b.data[i].push_back(a.data[j][i]); } } return b; } void inputMatrix(matrix* p, int si, int sj) { p->s_i = si; p->s_j = sj; for (int i = 0; i < si; i++) { p->data.push_back(vector<double>()); for (int j = 0; j < sj; j++) { p->data[i].push_back(0); cin >> p->data[i][j]; } } } void inputVectors(vectors* p, int si) { p->s = si; for (int i = 0; i < si; i++) { p->data.push_back(0); cin >> p->data[i]; } } void outputMatrix(const matrix& p) { for (int i = 0; i < p.s_i; i++) { for (int j = 0; j < p.s_j; j++) { cout << p.data[i][j] << ' '; } cout << endl; } } int main() { matrix Q, K, V, ans; vectors W; int n, d; cin >> n >> d; inputMatrix(&Q, n, d); inputMatrix(&K, n, d); inputMatrix(&V, n, d); inputVectors(&W, n); ans = (W * (Q * ~K)) * V; outputMatrix(ans); return 0; } \u9ad8\u7cbe\u5ea6\u56db\u5219\u8fd0\u7b97 \u91cd\u8f7d\u8fd0\u7b97\u7b26\u5b9e\u73b0\u8f93\u5165\u3001\u8f93\u51fa+\u3001-\u3001* #include <bits/stdc++.h> using namespace std; const int mm=10010; struct lll{ short d[mm]; int l; lll(){ memset(d,0,sizeof(d)); l=0; } }; lll operator+ (lll a,lll b){ lll c; short tmp=0; int dts=max(a.l,b.l); for (int i = 0; i < dts; i++) { c.d[i]=a.d[i]+b.d[i]+tmp; if(c.d[i]>=10){ c.d[i]-=10; tmp=1; } else{ tmp=0; } } if (tmp){ c.d[dts]=1; c.l=dts+1; } else{ c.l=dts; } return c; } lll operator* (lll a,int b){ for (int i = 0; i < a.l; i++) { a.d[i]*=b; } int i; for (i = 0; i < a.l || a.d[i]; i++) { a.d[i+1]+=a.d[i]/10; a.d[i]%=10; } a.l=i; return a; } lll operator* (lll a,lll b){ lll c; for (int i = 0; i < a.l; i++) { for (int j = 0; j < b.l; j++) { c.d[i+j]+=a.d[i]*b.d[j]; int k; for (k = 0; k < c.l || c.d[k]; k++) { c.d[k+1]+=c.d[k]/10; c.d[k]%=10; } c.l=max(c.l,k); } } return c; } ostream & operator<< (ostream &o,lll a){ string s; for (int i = a.l-1; i >= 0; i--) { s.push_back(a.d[i]+'0'); } o<<s; return o; } istream & operator>> (istream &in,lll &b){ string s; in>>s; int len=s.length(); for (int i = 0; i < len; i++) { b.d[i]=s[len-i-1]-'0'; } b.l=len; return in; } int main() { lll n1,n2,n3; cin>>n1>>n2; n3=(n1*n2)*2; cout<<n3; return 0; } \u5c0f\u6570\u7684\u8fdb\u5236\u8f6c\u6362 #include<iostream> using namespace std; string trans=\"0123456789ABCDEFGHIJKLMNOP\"; double convertto10(string s, int base){ size_t i; int ansi=0; double ansf=0; for (i = 0; i < s.size(); i++) { if(s[i]=='.')break; ansi*=base; ansi+=trans.find(s[i]); } for (size_t j=s.size()-1; j>i; j--) { ansf+=trans.find(s[j]); ansf/=base; } return ansi+ansf; } string convertfrom10(double x, int base){ int xi; double xf; xi=int(x); xf=x-xi; string ans=\"\"; while (xi){ ans=trans[xi%base]+ans; xi/=base; } if(xf==0)return ans; ans+='.'; int tmpcnt=0; while (xf && tmpcnt++<100) { xf*=base; int tmp=int(xf); ans+=trans[tmp]; xf-=tmp; } return ans; } int main(){ string x; int b1,b2; cout<<\"Input number, source base, target base.\\n\"; cin>>x>>b1>>b2; cout<<\"answer: \"<<convertfrom10(convertto10(x,b1),b2); return 0; } \u6587\u4ef6\u8bfb\u5199\u6a21\u5f0f\u5b9e\u73b0\u66ff\u6362 #include <stdio.h> FILE *fp; void freplace(char _from, char _to) { // \u5b57\u7b26\u66ff\u6362 rewind(fp); // \u5b9a\u4f4d\u5230\u6587\u4ef6\u5f00\u59cb\uff0c\u6e05\u9664\u6807\u5fd7 while (!feof(fp)) { char tmp = fgetc(fp); long tmppos= ftell(fp); if (tmp == _from) { fseek(fp, -1, SEEK_CUR); fputc(_to, fp); fseek(fp,-1,SEEK_CUR); } printf(\"%c %d %d\\n\",tmp, ftell(fp), feof(fp)); } } int main() { if (!(fp = fopen(\"..\\\\a.txt\", \"r+\"))) { printf(\"failed to open\"); return 0; } freplace('p', 'd'); fclose(fp); return 0; } \u65e0\u4e2d\u95f4\u53d8\u91cf\u4ea4\u6362\u53d8\u91cf #include <iostream> using namespace std; int main() { int a=1234567,b=8901234; a=a^b; b=a^b; a=a^b; cout<<a<<\" \"<<b<<endl; return 0; } \u5176\u4e2d\uff0c\u5f02\u6216\u8fd0\u7b97\u4e5f\u53ef\u4ee5\u7528\u52a0\u51cf\u6216\u4e58\u9664\u66ff\u4ee3\uff0c\u4f46\u6570\u636e\u8fc7\u5927\u65f6\u53ef\u80fd\u6ea2\u51fa\uff0c\u4e58\u9664\u65f6\u8981\u907f\u514d\u5305\u542b0\u3002 Algorithms Instances below are with advanced algorithms involved. KMP \u5b57\u7b26\u4e32\u5339\u914d #include <iostream> #include <string> #include <vector> using namespace std; string s, txt; vector<int> lsp; // LSP: longest suffix which is also a prefix void initlsp() { int n = s.size(); lsp.clear(); for (int i = 0; i < n; i++) { lsp.push_back(0); } int len = 0; for (int i = 1; i < n; i++) { // NOTE: i start from 1 while (len > 0 && s[i] != s[len]) { len = lsp[len - 1]; // fallback } if (s[i] == s[len]) { len++; // increment len when match } lsp[i] = len; } } int match() { int n = s.length(), m = txt.length(); int p = 0; for (int i = 0; i < m; i++) { while (p && txt[i] != s[p]) { p=lsp[p-1]; } if(txt[i]==s[p]){ p++; } if(p==n){ return i-p+1; } } return -1; } int main() { cout << \"input pattern string: \"; cin >> s; initlsp(); cout << \"LSP: \"; for (int i : lsp) { cout << i << ' '; } cout << endl; cout << \"input text string: \"; cin >> txt; int ans = match(); if (ans >= 0) { cout << \"index: \" << match() << endl; cout << txt << endl; for (int i = 0; i < ans; i++) { cout << ' '; } for (int i = 0; i < s.length(); i++) { cout << '^'; } } else { cout << \"not found\"; } return 0; }","title":"Elegant Codes"},{"location":"C-notes/elegant-codes/#elegant-codes","text":"\ud83d\udd90\ufe0f This is a collection of perfectly written codes to perform a specific task. Each code snippet is designed to be efficient, easy to understand, and reusable. These examples will probably help you improve your coding skills and find a better practice to implement a function. If you have any questions or suggestions, feel free to share it with me!","title":"Elegant Codes"},{"location":"C-notes/elegant-codes/#hanoi","text":"\u7ecf\u5178\u7684\u6c49\u8bfa\u5854\u95ee\u9898(c++) #include <bits/stdc++.h> using namespace std; int N; int cnt=0; int rod[3]={0,0,0}; char trans[]={'A','B','C'}; void movedisk(int n, int fr, int mi, int to){ if (n==1){//\u8fb9\u754c\u6761\u4ef6 rod[fr]--;rod[to]++; cnt++; cout<<\"step \"+to_string(cnt)+\": movedisk \"+trans[fr]+\" to \"+trans[to]<<\" [\"+to_string(rod[0])+\"] [\"+to_string(rod[1])+\"] [\"+to_string(rod[2])+\"]\"<<endl; return; } movedisk(n-1,fr,to,mi); movedisk(1,fr,mi,to); movedisk(n-1,mi,fr,to);//\u6bcf\u589e\u52a0\u4e00\u4e2adisk\uff0c\u9700\u8981\u7684\u6b21\u6570\u4e3a\u539f\u6765*2+1. return; } int main() { cout<<\"number of disks: \"; cin>>N; rod[0]=N; movedisk(N,0,1,2); return 0; }","title":"Hanoi"},{"location":"C-notes/elegant-codes/#_1","text":"\u6253\u5370\u6768\u8f89\u4e09\u89d2 #include <stdio.h> int countWid(int num){ return 4*num+1; } void giveSpace(int x){ if(x/100)printf(\" \"); else if(x/10)printf(\" \"); else printf(\" \"); } int C(int i,int j){ if(j==0)return 1; return C(i,j-1)*(i-j+1)/j; } int main() { int N; scanf(\"%d\",&N); int center=countWid(N)/2+1; for (int i = 0; i <= N; i++) { int spaces=center-countWid(i)/2-1; for (int j = 0; j < spaces; j++)printf(\" \"); for (int j = 0; j <= i; j++) { int tmp=C(i,j); printf(\"%d\",tmp); giveSpace(tmp); } if(i!=N)printf(\"\\n\"); } return 0; }","title":"\u6768\u8f89\u4e09\u89d2"},{"location":"C-notes/elegant-codes/#_2","text":"\u4e00\u79cd\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c e.g. 4 -13 5 / + answer: 2 #include <stdio.h> int stoi(char *s){ int ans=0, sgn=1; if(s[0]=='-'){ sgn=-1; } else ans=s[0]-'0'; for (int i = 1; s[i]!='\\0'; i++){ ans=ans*10+s[i]-'0'; } return sgn*ans; } int main() { char in[20]; int stack[10010]; int tail=-1; int a,b; while (scanf(\"%s\",in)!=EOF) { switch (in[0]) { case '+': a=stack[tail--], b=stack[tail--]; stack[++tail]=a+b; break; case '-': if(in[1]!='\\0'){ stack[++tail]=stoi(in); break; } a=stack[tail--], b=stack[tail--]; stack[++tail]=b-a; break; case '*': a=stack[tail--], b=stack[tail--]; stack[++tail]=a*b; break; case '/': a=stack[tail--], b=stack[tail--]; stack[++tail]=b/a; break; default: stack[++tail]=stoi(in); break; } } printf(\"%d\",(int)stack[0]); return 0; }","title":"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f"},{"location":"C-notes/elegant-codes/#_3","text":"\u4f18\u96c5\u7684\u4f7f\u7528\u8fd0\u7b97\u7b26\u8fdb\u884c\u77e9\u9635\u8fd0\u7b97(c++) #include <bits/stdc++.h> using namespace std; struct matrix { int s_i, s_j; vector<vector<double>> data; }; struct vectors { int s; vector<double> data; }; matrix operator*(const matrix& a, const matrix& b) { assert(a.s_j == b.s_i); matrix c; c.s_i = a.s_i; c.s_j = b.s_j; for (int i = 0; i < c.s_i; i++) { c.data.push_back(vector<double>()); for (int j = 0; j < c.s_j; j++) { double sum = 0; for (int k = 0; k < a.s_j; k++) { sum += a.data[i][k] * b.data[k][j]; } c.data[i].push_back(sum); } } return c; } matrix operator*(const vectors& a, const matrix& b) { matrix c; c.s_i = b.s_i; c.s_j = b.s_j; for (int i = 0; i < b.s_i; i++) { c.data.push_back(vector<double>()); for (int j = 0; j < b.s_j; j++) { c.data[i].push_back(a.data[i] * b.data[i][j]); } } return c; } matrix operator~(const matrix& a) { // Transpose matrix b; b.s_i = a.s_j; b.s_j = a.s_i; for (int i = 0; i < b.s_i; i++) { b.data.push_back(vector<double>()); for (int j = 0; j < b.s_j; j++) { b.data[i].push_back(a.data[j][i]); } } return b; } void inputMatrix(matrix* p, int si, int sj) { p->s_i = si; p->s_j = sj; for (int i = 0; i < si; i++) { p->data.push_back(vector<double>()); for (int j = 0; j < sj; j++) { p->data[i].push_back(0); cin >> p->data[i][j]; } } } void inputVectors(vectors* p, int si) { p->s = si; for (int i = 0; i < si; i++) { p->data.push_back(0); cin >> p->data[i]; } } void outputMatrix(const matrix& p) { for (int i = 0; i < p.s_i; i++) { for (int j = 0; j < p.s_j; j++) { cout << p.data[i][j] << ' '; } cout << endl; } } int main() { matrix Q, K, V, ans; vectors W; int n, d; cin >> n >> d; inputMatrix(&Q, n, d); inputMatrix(&K, n, d); inputMatrix(&V, n, d); inputVectors(&W, n); ans = (W * (Q * ~K)) * V; outputMatrix(ans); return 0; }","title":"\u77e9\u9635\u8fd0\u7b97"},{"location":"C-notes/elegant-codes/#_4","text":"\u91cd\u8f7d\u8fd0\u7b97\u7b26\u5b9e\u73b0\u8f93\u5165\u3001\u8f93\u51fa+\u3001-\u3001* #include <bits/stdc++.h> using namespace std; const int mm=10010; struct lll{ short d[mm]; int l; lll(){ memset(d,0,sizeof(d)); l=0; } }; lll operator+ (lll a,lll b){ lll c; short tmp=0; int dts=max(a.l,b.l); for (int i = 0; i < dts; i++) { c.d[i]=a.d[i]+b.d[i]+tmp; if(c.d[i]>=10){ c.d[i]-=10; tmp=1; } else{ tmp=0; } } if (tmp){ c.d[dts]=1; c.l=dts+1; } else{ c.l=dts; } return c; } lll operator* (lll a,int b){ for (int i = 0; i < a.l; i++) { a.d[i]*=b; } int i; for (i = 0; i < a.l || a.d[i]; i++) { a.d[i+1]+=a.d[i]/10; a.d[i]%=10; } a.l=i; return a; } lll operator* (lll a,lll b){ lll c; for (int i = 0; i < a.l; i++) { for (int j = 0; j < b.l; j++) { c.d[i+j]+=a.d[i]*b.d[j]; int k; for (k = 0; k < c.l || c.d[k]; k++) { c.d[k+1]+=c.d[k]/10; c.d[k]%=10; } c.l=max(c.l,k); } } return c; } ostream & operator<< (ostream &o,lll a){ string s; for (int i = a.l-1; i >= 0; i--) { s.push_back(a.d[i]+'0'); } o<<s; return o; } istream & operator>> (istream &in,lll &b){ string s; in>>s; int len=s.length(); for (int i = 0; i < len; i++) { b.d[i]=s[len-i-1]-'0'; } b.l=len; return in; } int main() { lll n1,n2,n3; cin>>n1>>n2; n3=(n1*n2)*2; cout<<n3; return 0; }","title":"\u9ad8\u7cbe\u5ea6\u56db\u5219\u8fd0\u7b97"},{"location":"C-notes/elegant-codes/#_5","text":"#include<iostream> using namespace std; string trans=\"0123456789ABCDEFGHIJKLMNOP\"; double convertto10(string s, int base){ size_t i; int ansi=0; double ansf=0; for (i = 0; i < s.size(); i++) { if(s[i]=='.')break; ansi*=base; ansi+=trans.find(s[i]); } for (size_t j=s.size()-1; j>i; j--) { ansf+=trans.find(s[j]); ansf/=base; } return ansi+ansf; } string convertfrom10(double x, int base){ int xi; double xf; xi=int(x); xf=x-xi; string ans=\"\"; while (xi){ ans=trans[xi%base]+ans; xi/=base; } if(xf==0)return ans; ans+='.'; int tmpcnt=0; while (xf && tmpcnt++<100) { xf*=base; int tmp=int(xf); ans+=trans[tmp]; xf-=tmp; } return ans; } int main(){ string x; int b1,b2; cout<<\"Input number, source base, target base.\\n\"; cin>>x>>b1>>b2; cout<<\"answer: \"<<convertfrom10(convertto10(x,b1),b2); return 0; }","title":"\u5c0f\u6570\u7684\u8fdb\u5236\u8f6c\u6362"},{"location":"C-notes/elegant-codes/#_6","text":"#include <stdio.h> FILE *fp; void freplace(char _from, char _to) { // \u5b57\u7b26\u66ff\u6362 rewind(fp); // \u5b9a\u4f4d\u5230\u6587\u4ef6\u5f00\u59cb\uff0c\u6e05\u9664\u6807\u5fd7 while (!feof(fp)) { char tmp = fgetc(fp); long tmppos= ftell(fp); if (tmp == _from) { fseek(fp, -1, SEEK_CUR); fputc(_to, fp); fseek(fp,-1,SEEK_CUR); } printf(\"%c %d %d\\n\",tmp, ftell(fp), feof(fp)); } } int main() { if (!(fp = fopen(\"..\\\\a.txt\", \"r+\"))) { printf(\"failed to open\"); return 0; } freplace('p', 'd'); fclose(fp); return 0; }","title":"\u6587\u4ef6\u8bfb\u5199\u6a21\u5f0f\u5b9e\u73b0\u66ff\u6362"},{"location":"C-notes/elegant-codes/#_7","text":"#include <iostream> using namespace std; int main() { int a=1234567,b=8901234; a=a^b; b=a^b; a=a^b; cout<<a<<\" \"<<b<<endl; return 0; } \u5176\u4e2d\uff0c\u5f02\u6216\u8fd0\u7b97\u4e5f\u53ef\u4ee5\u7528\u52a0\u51cf\u6216\u4e58\u9664\u66ff\u4ee3\uff0c\u4f46\u6570\u636e\u8fc7\u5927\u65f6\u53ef\u80fd\u6ea2\u51fa\uff0c\u4e58\u9664\u65f6\u8981\u907f\u514d\u5305\u542b0\u3002","title":"\u65e0\u4e2d\u95f4\u53d8\u91cf\u4ea4\u6362\u53d8\u91cf"},{"location":"C-notes/elegant-codes/#algorithms","text":"Instances below are with advanced algorithms involved.","title":"Algorithms"},{"location":"C-notes/elegant-codes/#kmp","text":"#include <iostream> #include <string> #include <vector> using namespace std; string s, txt; vector<int> lsp; // LSP: longest suffix which is also a prefix void initlsp() { int n = s.size(); lsp.clear(); for (int i = 0; i < n; i++) { lsp.push_back(0); } int len = 0; for (int i = 1; i < n; i++) { // NOTE: i start from 1 while (len > 0 && s[i] != s[len]) { len = lsp[len - 1]; // fallback } if (s[i] == s[len]) { len++; // increment len when match } lsp[i] = len; } } int match() { int n = s.length(), m = txt.length(); int p = 0; for (int i = 0; i < m; i++) { while (p && txt[i] != s[p]) { p=lsp[p-1]; } if(txt[i]==s[p]){ p++; } if(p==n){ return i-p+1; } } return -1; } int main() { cout << \"input pattern string: \"; cin >> s; initlsp(); cout << \"LSP: \"; for (int i : lsp) { cout << i << ' '; } cout << endl; cout << \"input text string: \"; cin >> txt; int ans = match(); if (ans >= 0) { cout << \"index: \" << match() << endl; cout << txt << endl; for (int i = 0; i < ans; i++) { cout << ' '; } for (int i = 0; i < s.length(); i++) { cout << '^'; } } else { cout << \"not found\"; } return 0; }","title":"KMP \u5b57\u7b26\u4e32\u5339\u914d"},{"location":"C-notes/try-something-in-c/","text":"Try something in C \u4e00\u4e9b\u503c\u5f97\u5c1d\u8bd5\u7684\u4ee3\u7801 \ud83d\udc49 Welcome to my C programming notes! This is a collection of interesting C code snippets and concepts I've gathered. Feel free to explore, learn, and experiment with these examples. This page is being continuously updated, so be sure to check back often for new content! If you have any questions, suggestions, or want to discuss any of these topics further, please don't hesitate to make a comment or reach out to me. Your input is valuable and appreciated! Basics \u7279\u6b8a\u7684\u5b57\u7b26 \u54cd\u94c3\u7b26\uff0c\u5728\u5916\u90e8\u7ec8\u7aef\u8fd0\u884c\u65f6\u4f1a\u53d1\u51fa\u58f0\u97f3\ud83d\udd14 #include<stdio.h> int main(){ printf(\"\\a\"); return 0; } '\\b' \u56de\u9000\u5149\u6807 \u5b9e\u73b0\u767e\u5206\u6bd4\u4ece0\u53d8\u5316\u5230100\uff1a #include <stdio.h> #include <windows.h> int main(){ printf(\" 0%%\"); for (int i = 1; i <= 100; i++) { printf(\"\\b\\b\\b\\b\"); printf(\"%3d%%\",i); Sleep(100); } return 0; } float \u548c double \u5e76\u975e\u51c6\u786e\u503c \u8ba1\u7b97\u673a\u4ee5\u4e8c\u8fdb\u5236\u5b58\u50a8\u5c0f\u6570\uff0c\u5c0f\u6570\u70b9\u540e\u7684\u90e8\u5206\u4ee52\u7684\u8d1f\u6307\u6570\u5f62\u5f0f\u5b58\u50a8\uff0c\u4e00\u4e9b\u6709\u9650\u7684\u5341\u8fdb\u5236\u5c0f\u6570\u5c31\u53d8\u6210\u4e86\u65e0\u9650\u5faa\u73af\u5c0f\u6570\uff0c\u65e0\u6cd5\u51c6\u786e\u5b58\u50a8\u3002 #include<stdio.h> int main(){ for (float i = 0; i < 100; i+=1) { printf(\"%10.20f\\n\", i/100); } return 0; } \u53c2\u8003\uff1a\u5c0f\u6570\u7684\u8fdb\u5236\u8f6c\u6362\u4ee3\u7801 \u94fe\u63a5 \u26a0\ufe0f float \u548c double \u4e0d\u80fd\u8fdb\u884c\u4f4d\u8fd0\u7b97\u548c\u53d6\u6a21\uff08\u6216\u88ab\u53d6\u6a21\uff09\u64cd\u4f5c \u5b57\u7b26\u4e32\u672b\u5c3e\u90fd\u662f\u7a7a\u5b57\u7b26 \u2018\\0\u2019 #include<stdio.h> int main(){ char str[10]=\"world\"; char str2[10]=\"\"; for (int i = 0; i < 10; i++) { if(str[i]=='\\0'){ printf(\"\\\\0 \"); } else{ printf(\"%c \",str[i]); } } printf(\"\\n\"); for (int i = 0; i < 10; i++) { if(str2[i]=='\\0'){ printf(\"\\\\0 \"); } else{ printf(\"%c \",str2[i]); } } return 0; } \u8f93\u51fa\u4e00\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\uff08\u662f\u8865\u7801\uff09 #include<stdio.h> int main(){ while(1){ short a; scanf(\"%hd\",&a); for (int i = 15; i >=0; i--) { printf(\"%d\",a>>i&1); if(i==8)printf(\" \"); } printf(\"\\n\"); } return 0; } \u5e26\u6709\u7a7a\u8bed\u53e5\u7684for for ( a ; b ; c ) { ... } \u5f53 b \u4e3a\u7a7a\u65f6\uff0c\u76f8\u5f53\u4e8e\u586b\u5165\u4e86\u975e\u7a7a\u5e38\u91cf\uff0c\u5373\u5faa\u73af\u5c06\u4e00\u76f4\u8fdb\u884c\uff08\u9664\u975e\u9047\u5230\u8f6c\u79fb\u8bed\u53e5\uff09 a c \u4e3a\u7a7a\u65f6\uff0c\u5c06\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c scanf \u7684\u683c\u5f0f\u63a7\u5236 \u7a7a\u767d\u5b57\u7b26 \u4ee5\u4e0b\u7684\u8868\u8fbe\u5168\u90fd\u7b49\u4ef7 scanf(\"%s%s\",&a,&b); scanf(\"%s %s\",&a,&b); scanf(\"%s\\n%s\",&a,&b); scanf(\"%s\\t%s\",&a,&b); scanf(\"%s\\n \\t\\n\\t %s\",&a,&b); \u7a7a\u767d\u5b57\u7b26: \\n \\t ' ' \u7684\u4f5c\u7528\u90fd\u76f8\u540c\uff0c\u8fde\u7eed\u7684\u7a7a\u767d\u5b57\u7b26\u5c06\u88ab\u89c6\u4e3a\u4e00\u5904\u3002 scanf \u8bfb\u53d6\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\u65f6\u4f1a\u81ea\u52a8\u8df3\u8fc7\u7a7a\u767d\u5b57\u7b26\u3002 \u26a0\ufe0f \u5f53\u8bfb\u53d6 %c \u65f6\uff0c\u7a7a\u767d\u5b57\u7b26\u53ef\u7528\u4e8e\u8df3\u8fc7\u8f93\u5165\u4e2d\u7684\u7a7a\u767d\u5b57\u7b26 e.g. \u8f93\u5165 a b : scanf(\"%c%c\",&a,&b); //a='a', b=' ' scanf(\"%c %c\",&a,&b); //a='a', b='b' \u4e0e\u5176\u4ed6\u8f93\u5165\u65b9\u5f0f\u6df7\u7528\uff0ce.g. input: hello world #include <stdio.h> int main() { char a[100],b[100]; scanf(\"%s\",a); gets(b); printf(\"%s\",b); return 0; } \u6539\u4e3a scanf(\"%s \",a); ,b=\u201dworld\u201d \u666e\u901a\u5b57\u7b26 #include <stdio.h> char a[100],b[100]; int main() { int success; success=scanf(\"%s and %s\",a,b); printf(\"%s %s\",a,b); return 0; } \u8868\u8fbe\u5f0f\u52a0\u5165\u4e86\u666e\u901a\u5b57\u7b26\uff0c\u5fc5\u987b\u8f93\u5165 abcde and fghij \u624d\u80fd\u6b63\u786e\u8f93\u5165a\u548cb \u8d4b\u503c\u7981\u6b62\u5b57\u7b26 * #include <stdio.h> char a,b; int main() { scanf(\"%c %*s %c\",&a,&b); printf(\"%c %c\",a,b); return 0; } input a bcdef g output a g \u6307\u5b9a\u6700\u5927\u57df\u5bbd #include <stdio.h> char a[100],b[100]; int main() { scanf(\"%5s%5s\",a,b); printf(\"%s %s\",a,b); return 0; } input abcdefghijklmnopqrstuvwxyz output abcde fghij Variables and pointers \u53d8\u91cf\u88ab\u8d4b\u7ed9\u8d85\u51fa\u8303\u56f4\u7684\u503c\uff0c\u81ea\u52a8\u53d6\u6a21 #include <stdio.h> short a=0x12345678; int main() { printf(\"%x\" ,a); return 0; } \u5185\u5c42\u53d8\u91cf\u4e0e\u5916\u5c42\u53d8\u91cf\u91cd\u540d\uff0c\u5916\u5c42\u7684\u53d8\u91cf\u88ab\u5c4f\u853d #include <stdio.h> int main() { for (int i = 0; i < 10; ++i) { for (int i = 0; i < 10; ++i) { printf(\"%d \",i); } printf(\"\\n\"); } return 0; } \u5728\u540c\u4e00\u5c42\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a\u91cd\u540d\u53d8\u91cf\u4f1a\u62a5\u9519 #include <stdio.h> int main() { int i=10; int i=20; return 0; } error: redeclaration of 'int i' **#include <stdio.h> int main() { int i=10; { int i=20; printf(\"%d\\n\",i); } printf(\"%d\",i); return 0; }** \u7528\u4ee3\u7801\u5757\u5c31\u53ef\u5b9a\u4e49\u5185\u5c42\u540c\u540d\u53d8\u91cf\u3002 static \u53d8\u91cf\u521d\u59cb\u5316\u53ea\u6267\u884c\u4e00\u6b21 #include <stdio.h> int main() { for (int i = 0; i < 10; ++i) { static int a=0; //\u4e0b\u6b21\u6267\u884c\u5230\u8fd9\u91cc\uff0c\u76f4\u63a5\u8df3\u8fc7\u8fd9\u6761\u8bed\u53e5 printf(\"%d \",a); a++; } return 0; } \u5b9e\u9645\u4e0a\uff0cstatic\u53d8\u91cf\u5728\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\u5c31\u5df2\u7ecf\u521d\u59cb\u5316\u3002\u4f46\u82e5\u5728\u5b9a\u4e49\u4e4b\u524d\u5f15\u7528\uff0c\u5219\u4f1a\u62a5\u9519\u3002 static\u53d8\u91cf\u7684\u751f\u547d\u671f\u4e0e\u5168\u5c40\u53d8\u91cf\u76f8\u540c\uff0c\u800c\u4f5c\u7528\u57df\u4e0e\u5c40\u90e8\u53d8\u91cf\u76f8\u540c\u3002 #include <stdio.h> int main() { printf(\"hi\"); //\u8bbe\u7f6e\u65ad\u70b9\uff0c\u89c2\u5bdf\u5230\u663e\u793ax=100 static int x=100; return 0; } \u4e24\u79cd\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5 method 1: #include <stdio.h> int main() { char *s1=\"hello\"; //\u5b57\u7b26\u4e32\u5b58\u50a8\u5728\u5e38\u91cf\u533a\uff0c\u5730\u5740\u8d4b\u7ed9s1\uff0cs1\u662f\u6307\u9488\u53d8\u91cf printf(\"%s \",s1); printf(\"%c \",*(s1+1)); printf(\"%c \",s1[2]); s1=\"world\"; //s1\u6307\u5411\u53e6\u4e00\u5b57\u7b26\u4e32\u5e38\u91cf printf(\"%s \",s1); return 0; } s1\u53ef\u4fee\u6539\uff0c\u5b57\u7b26\u4e32\u4e0d\u51c6\u66f4\u6539 method 2: #include <stdio.h> int main() { char s1[]=\"hello\"; //\u5b57\u7b26\u4e32\u5b58\u50a8\u5728\u53d8\u91cf\u533a\uff0cs1\u4e3a\u6307\u9488\u5e38\u91cf\uff0c\u6307\u5411\u5b57\u7b26\u4e32 printf(\"%s \",s1); printf(\"%c \",*(s1+1)); printf(\"%c \",s1[2]); s1[4]='0'; //\u66f4\u6539\u5b57\u7b26\u4e32 printf(\"%s \",s1); return 0; } \u5b57\u7b26\u4e32\u53ef\u4fee\u6539\uff0cs1\u4e0d\u53ef\u4fee\u6539 \u5b9a\u4e49\u5e38\u6307\u9488 int * const p;//\u6307\u5411\u6574\u578b\u53d8\u91cf\u7684\u5e38\u6307\u9488 const int * const p; //\u6307\u5411\u6574\u578b\u5e38\u91cf\u7684\u5e38\u6307\u9488 \u26a0\ufe0f const int *p \u5b9a\u4e49\u7684\u662f\u6307\u5411\u6574\u578b\u5e38\u91cf\u7684\u6307\u9488\u53d8\u91cf\uff0c\u6574\u578b\u5e38\u91cf\u672c\u8eab\u4e0d\u80fd\u4fee\u6539\uff0c\u4f46\u6307\u9488\u53ef\u4ee5\u4fee\u6539\uff0c\u6307\u5411\u5176\u4ed6\u5730\u5740\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u7684\u8fd9\u6bb5\u4ee3\u7801\u80fd\u591f\u6b63\u5e38\u8fd0\u884c\uff1a #include <stdio.h> int main() { const char *p=\"12345\"; p++; printf(\"%c\",*p); return 0; } \u65e0\u7c7b\u578b\u6307\u9488 void * void\u6307\u9488\u53ef\u4ee5\u6307\u5411\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5982\u679c\u8981\u5c06void\u6307\u9488p\u8d4b\u7ed9\u5176\u4ed6\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5219\u9700\u8981\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u3002 void\u6307\u9488\u4e0d\u5e94\u7528\u4e8e\u8ba1\u7b97\uff0c\u5426\u5219\u5c06\u6536\u5230\u8b66\u544a #include <stdio.h> int a[]={1,2,3,4,5,6,7,8,9,10}; int *p=a; void *q=a; //\u65e0\u7c7b\u578b\u6307\u9488 int main(){ printf(\"*p=%d *q=%d\\n\",*p,*(int *)q); return 0; } \u5404\u6307\u9488\u6240\u5360\u7684\u7a7a\u95f4: #include <stdio.h> int *p1; char *p2; double *p3; void *p4; //char\uff0a\u548cvoid\uff0a\u6307\u5411\u7a7a\u95f4\u5747\u4e3a1byte int a[10][10]; int main(){ printf(\"%d %d %d %d %d\\n\",(p1+1)-p1,(p2+1)-p2,(p3+1)-p3,(a+1)-a,(a[0]+1)-a[0]); printf(\"%d %d %d %d %d %d\",(int)((char*)(p1+1)-(char*)p1),(char*)(p2+1)-(char*)p2,(char*)(p3+1)-(char*)p3,(char*)(p4+1)-(char*)p4,(char*)(a+1)-(char*)a,(char*)(a[0]+1)-(char*)a[0]); return 0; } \u8f93\u51fa\uff1a 1 1 1 1 1 4 1 8 1 40 4 \u590d\u6742\u7684\u6307\u9488\u58f0\u660e int (*p[10])[20]; //p\u662f\u957f\u5ea6\u4e3a\u5341\u7684\u6307\u9488\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6307\u9488\u6307\u5411\u957f\u5ea6\u4e3a20\u7684\u6574\u6570\u6570\u7ec4 int (*p[10])(int,int); //p \u662f\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6307\u5411\u4e00\u4e2a\u51fd\u6570\u7684\u6307\u9488\uff0c\u8fd9\u4e9b\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a int \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a int \u7c7b\u578b\u7684\u503c\u3002 int (*p(int))[10]; //p \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a int \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5305\u542b 10 \u4e2a int \u7c7b\u578b\u5143\u7d20\u7684\u6570\u7ec4\u7684\u6307\u9488\u3002 int *p(int)[10]; //p \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a int \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u6307\u5411 int \u7c7b\u578b\u7684\u6307\u9488\u7684\u6570\u7ec4\u3002 int (*p(int))(int *,int); //p \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u6536\u4e00\u4e2aint\u578b\u53c2\u6570\uff0c\u8fd4\u56de\u503c\u4e3a\u51fd\u6570\u6307\u9488 int *(*p[10])(int,int); //\u6307\u5411\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a int \u7c7b\u578b\u7684\u6307\u9488\u3002 int (*p[10])(int,int)[5]; //\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b 5 \u4e2a int \u7c7b\u578b\u5143\u7d20\u7684\u6570\u7ec4\u3002 int *(*p[10])(int,int)[5]; //\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b 5 \u4e2a int \u6307\u9488\u5143\u7d20\u7684\u6570\u7ec4\u3002 int (*(*p[10])(int,int))[5]; //\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u957f\u5ea6\u4e3a 5 \u7684 int \u6570\u7ec4\u7684\u6307\u9488\u3002 int (*p)(char (*)(int *)); //p\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u53d7 int * \u7c7b\u578b\u53c2\u6570\u5e76\u8fd4\u56de char \u7c7b\u578b\u503c\u7684\u51fd\u6570\u6307\u9488 \u51fd\u6570\u6307\u9488\u7684\u8c03\u7528 \u5373\u53ef\u76f4\u63a5\u8c03\u7528 p(...) \uff0c\u4e5f\u53ef\u95f4\u63a5\u8bbf\u95ee (*p)(...) #include <stdio.h> void hello(int x){ printf(\"hello, %d\\n\",x); } void (*pf)(int)=hello; int main() { pf(1); (*pf)(2); return 0; } \u2139\ufe0f \u95f4\u63a5\u8bbf\u95ee\u65f6\uff0c\u7531\u4e8e\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\uff0c *pf \u5468\u56f4\u9700\u8981\u6dfb\u52a0\u62ec\u53f7 realloc() \u5f53\u4e00\u4e2a\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u9700\u8981\u66f4\u5927\u7684\u8fde\u7eed\u5b58\u50a8\u7a7a\u95f4\u65f6\uff0c\u7528 void * realloc(void *ptr, size_t newsize) \u5c06\u5f53\u524d\u5185\u5b58\u5757\u590d\u5236\u5230\u66f4\u5927\u7a7a\u95f4\u3002 \u529f\u80fd\uff1a\u5148\u5224\u65ad\u5f53\u524d\u7684\u6307\u9488\u662f\u5426\u6709\u8db3\u591f\u7684\u8fde\u7eed\u7a7a\u95f4\uff0c\u5982\u679c\u6709\uff0c\u6269\u5927ptr\u6307\u5411\u7684\u5730\u5740\uff0c\u5e76\u4e14\u5c06ptr\u8fd4\u56de\uff0c\u5982\u679c\u7a7a\u95f4\u4e0d\u591f\uff0c\u5148\u6309\u7167newsize\u6307\u5b9a\u7684\u5927\u5c0f\u5206\u914d\u7a7a\u95f4\uff0c\u5c06\u539f\u6709\u6570\u636e\u4ece\u5934\u5230\u5c3e\u62f7\u8d1d\u5230\u65b0\u5206\u914d\u7684\u5185\u5b58\u533a\u57df\uff0c\u800c\u540e\u91ca\u653e\u539f\u6765ptr\u6240\u6307\u5185\u5b58\u533a\u57df\uff08\u539f\u6765\u6307\u9488\u662f\u81ea\u52a8\u91ca\u653e\uff09\uff0c\u540c\u65f6\u8fd4\u56de\u65b0\u5206\u914d\u7684\u5185\u5b58\u533a\u57df\u7684\u9996\u5730\u5740\u3002\u5373\u91cd\u65b0\u5206\u914d\u5b58\u50a8\u5668\u5757\u7684\u5730\u5740\u3002 Array \u5f00\u4e00\u4e2a\u957f\u5ea6\u4e3a \u53d8\u91cf \u7684\u6570\u7ec4 #include<stdio.h> int main(){ int n; scanf(\"%d\",&n); int a[n]; for (int i = 0; i < n; i++) { printf(\"%d \",a[i]); } } a[n]\u5fc5\u987b\u662f \u5c40\u90e8\u53d8\u91cf \uff0c\u82e5\u5728\u5168\u5c40\u5b9a\u4e49\uff0c\u4f1a\u62a5\u9519 variably modified 'a' at file scope #include<stdio.h> int n=10; //\u5728c\u4e2d\uff0c\u5373\u4f7f\u6539\u4e3aconst int \u4e5f\u4f1a\u62a5\u9519\uff0c\u6539\u4e3acpp\u6587\u4ef6\u540e\u6b63\u5e38 int a[n]; int main(){ for (int i = 0; i < n; i++) { printf(\"%d \",a[i]); } } \u4e8c\u7ef4\u6570\u7ec4\u6240\u5360\u5185\u5b58\u662f\u8fde\u7eed\u7684 #include <stdio.h> int main() { int s[2][3]={{1,3,5}, {2,4,6}}; for (int i = 0; i < 6; i++){ printf(\"%d \",s[0][i]); //s[0]\u8d85\u51fa\u540e\u8fdb\u5165s[1] } } \u5c40\u90e8\u53d8\u91cf\u662f\u672a\u7ecf\u521d\u59cb\u5316\u7684\uff0c\u5168\u5c40\u53d8\u91cf\u88ab\u521d\u59cb\u5316\u4e3a\u96f6\u3002 #include<stdio.h> int a[100]; int main(){ for (int i = 0; i < 100; i++) { printf(\"%d \",a[i]); } } \u7ed3\u679c\u5168\u4e3a 0 #include<stdio.h> int main(){ int a[100]; for (int i = 0; i < 100; i++) { printf(\"%d \",a[i]); } } \u7ed3\u679c\u4e3a\u4e71\u4e03\u516b\u7cdf\u7684\u6570 \u6570\u7ec4\u7684\u521d\u59cb\u5316 \u7528\u7a7a\u767d\u5217\u8868\u521d\u59cb\u5316\u5c40\u90e8\u6570\u7ec4 #include <stdio.h> int main(){ int arr[5] = {}; // Initialize all elements to 0 for(int i = 0; i < 5; i++){ printf(\"%d \", arr[i]); } return 0; } \u4f7f\u7528\u7a7a\u767d\u5217\u8868 {} \u53ef\u4ee5\u5c06\u5c40\u90e8\u6570\u7ec4\u7684\u6240\u6709\u5143\u7d20\u521d\u59cb\u5316\u4e3a0\u3002\u8fd9\u6bd4\u624b\u52a8\u521d\u59cb\u5316\u6bcf\u4e2a\u5143\u7d20\u66f4\u65b9\u4fbf\u3002 \u90e8\u5206\u521d\u59cb\u5316\u6570\u7ec4 \u53ea\u6709\u6570\u7ec4\u7684\u7b2c\u4e00\u7ef4\u5927\u5c0f\u53ef\u4ee5\u4e0d\u586b\uff0c\u81ea\u52a8\u786e\u5b9a\u3002 int A[][]={{1,2,3},{4,5,6},{7,8,9}}; //\u9519\u8bef int A[3][]={{1,2,3},{4,5,6},{7,8,9}}; //\u9519\u8bef int A[][3]={{1,2,3},{4,5,6},{7,8,9}}; //\u6b63\u786e \u521d\u59cb\u5316\u7684\u987a\u5e8f: Cross then down \u27a1\ufe0f\u2199\ufe0f\u27a1\ufe0f #include <stdio.h> int main() { int A[3][3] = {1, 2, 3, 4, 5, 6, 7}; for (int i = 0; i < 3; i++) { for (int j = 0; j < 3; j++) { printf(\"%d \", A[i][j]); } printf(\"\\n\"); } return 0; } \u800c int A[3][3] = {{1, 2, 3, 4}}; \u4f1a\u56e0\u8d85\u51fa\u957f\u5ea6\u62a5\u9519 \u521d\u59cb\u5316\u6307\u5b9a\u4e0b\u6807\u7684\u5143\u7d20 \u26a0\ufe0f \u7ecf\u8fc7\u6211\u7684\u6d4b\u8bd5\uff0c\u4f7f\u7528\u672c\u8282\u7684\u65b9\u6cd5\uff0c\u5728windows\u4e2d\u7684gcc\u3001msvc\u8fd0\u884c\u5747\u4f1a\u62a5\u9519\uff0clinux\u4e0b\u7684gcc\u80fd\u591f\u6b63\u5e38\u8fd0\u884c \u4f8b\u5982 int arr[8] = {[3]=4}; \u4e5f\u53ef\u6df7\u5408\u4f7f\u7528\uff08\u4ed4\u7ec6\u89c2\u5bdf\u6b64\u65f6\u521d\u59cb\u5316\u7684\u987a\u5e8f\uff09 #include <stdio.h> //\u8bfe\u672c\u4f8b\u9898 int main() { int arr[8] = {1,[3]=4,[1]=2,6,[6]=7,8}; for (int i = 0; i < 8; i++) { printf(\"%d \",arr[i]); } return 0; } \u987a\u5e8f\uff1a\u5f53\u672a\u6307\u5b9a\u4e0b\u6807\u65f6\uff0c\u5c06\u521d\u59cb\u5316\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 \u82e5\u4e00\u4e2a\u5143\u7d20\u88ab\u591a\u6b21\u521d\u59cb\u5316\uff0c\u6700\u7ec8\u7684\u503c\u4e3a\u6700\u540e\u4e00\u6b21\u7684\u7ed3\u679c\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4e5f\u53ef\u4ee5 #include <stdio.h> int main() { int arr[5][5] = {[2] = {[3] = 8}}; for (int i = 0; i < 5; i++) { for (int j = 0; j < 5; j++) { printf(\"%d \", arr[i][j]); } printf(\"\\n\"); } return 0; } Structure \u679a\u4e3e Enum \u4e0d\u51fa\u73b0\u679a\u4e3e\u540d enum {SUN,MON,TUE,WED,THU,FRI,SAT}week1,week2; //\u5b9a\u4e49\u4e86\u4e24\u4e2a\u679a\u4e3e\u53d8\u91cf \u7531\u4e8e\u6ca1\u6709\u540d\u79f0\uff0c\u65e0\u6cd5\u5f15\u7528\uff0c\u4e0d\u80fd\u518d\u5b9a\u4e49\u66f4\u591a\u8fd9\u79cd\u7c7b\u578b\u7684\u679a\u4e3e\u53d8\u91cf \u6307\u5b9a\u679a\u4e3e\u6570\u503c\u65f6\u91cd\u590d enum week{SUN,MON,TUE,WED=0,THU,FRI,SAT}; \u503c\u5206\u522b\u4e3a 0 1 2 0 1 2 3 4 \u5f53\u679a\u4e3e\u7684\u6570\u503c\u4e0d\u8fde\u7eed\u65f6\u679a\u4e3e\u53d8\u91cf\u7684\u8303\u56f4 #include <stdio.h> enum week{SUN,MON,TUE,WED,THU,FRI,SAT=10}; int main() { enum week week1; week1=6; return 0; } week \u7684\u503c\u4e0d\u80fd\u4e3a6 error: invalid conversion from 'int' to 'week' [-fpermissive] \u8054\u5408\u4e0e\u5b57\u6bb5 \u8054\u5408\u53ef\u4ee5\u5c06\u540c\u4e00\u6bb5\u5b58\u50a8\u7a7a\u95f4\u4ee5\u591a\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5b58\u53d6\uff1b\u5b57\u6bb5\u53ef\u4ee5\u5c06\u4e00\u6bb5\u5185\u5b58\u6309\u4f4d\u5bbd\u62c6\u5206\u3002 \ud83d\udca1\u53ef\u4ee5\u5229\u7528\u8054\u5408\u4e0e\u5b57\u6bb5\u7b80\u4fbf\u7684\u5b9e\u73b001\u7684\u679a\u4e3e\uff1a #include <stdio.h> union selection{ struct { unsigned a: 1; unsigned b: 1; unsigned c: 1; unsigned d: 1; }; unsigned D; }e; int main(){ for (e.D=0; e.D<0xf; e.D++){ printf(\"a:%d b:%d c:%d d:%d\\n\",e.a,e.b,e.c,e.d); } return 0; } \u5b57\u6bb5\u4e0d\u80fd\u8de8\u8d8a\u4e00\u4e2a\u5b57\u7684\u8fb9\u754c #include <stdio.h> union selection{ struct { unsigned short a: 1; unsigned short b: 16; //\u5b58\u5728\u4e0b\u4e00\u4e2a\u5b57\u4e2d }; unsigned long long D; }e; int main() { e.a=1; e.b=1; printf(\"%x\",e.D); return 0; } Function \u5b9e\u53c2\u6c42\u503c\u987a\u5e8f\u7531\u7f16\u8bd1\u5668\u51b3\u5b9a #include <stdio.h> void printab(int a,int b){ printf(\"%d %d\",a,b); } int main() { int a=0; printab(a,a++); return 0; } \u6216\u8005\uff0c #include <stdio.h> int main() { int a=0; printf(\"%d %d\",a,a++); return 0; } \u53c2\u6570\u6570\u76ee\u53ef\u53d8\u7684\u51fd\u6570 #include <stdio.h> #include <stdarg.h> int my_max(int n, ...){ int ans=-2147483648; va_list a; va_start(a,n); for (int i = 0; i < n; i++) { int tmp=va_arg(a,int); if(tmp >= ans) ans=tmp; } va_end(a); return ans; } int main(){ int a,b,c; scanf(\"%d%d%d\",&a,&b,&c); printf(\"max of abc is: %d\\n\",my_max(3,a,b,c)); return 0; } C++ \u98ce\u683c\uff1a #include <iostream> #include <initializer_list> using namespace std; int my_max(initializer_list<int>arr){ int ans=INT32_MIN; for (auto i = arr.begin(); i!=arr.end() ; i++){ ans=max(ans,*i); } return ans; } int main() { int a,b,c; cin>>a>>b>>c; cout<<my_max({a,b,c}); return 0; } Miscellaneous \u5b8f \u6761\u4ef6\u7f16\u8bd1 \u91cd\u590d\u5b9a\u4e49\u5b8f\u65f6\uff0c\u7f16\u8bd1\u9884\u5904\u7406\u65f6\u4ece\u5934\u5230\u5c3e\u987a\u5e8f\u64cd\u4f5c\uff0c\u5373\u6bcf\u4e2a\u4f4d\u7f6ea\u7684\u503c\u4e3a\u4e0a\u4e00\u6b21\u5b9a\u4e49\u7684\u503c\uff0c\u4f46\u4f1a\u6536\u5230\u4e00\u6761\u8b66\u544a #include <stdio.h> #define a 1 int x = 1; int main() { #if a printf(\"a != %d\\n\", a);//\u6267\u884c #define a 10 #else printf(\"a == 0\\n\"); #endif #if a == 10 printf(\"a == %d\\n\", a);//\u6267\u884c #else printf(\"a != 10\\n\"); #endif return 0; } if \u63a7\u5236 if \u53ef\u4ee5\u63a5\u4e00\u4e9b\u8868\u8fbe\u5f0f\uff0c\u6216\u662f\u5b8f\u5b9a\u4e49\u7684\u201c\u51fd\u6570\u201d\uff0c\u4f46\u662f\u6b64\u65f6\u4f20\u5165\u7684\u5b9e\u53c2\u5fc5\u987b\u5728\u5b8f\u4e2d\u5b9a\u4e49 #include <stdio.h> #define ABS(x) (((x)>0)?(x):-(x)) #define a -1 int main() { #if ABS(a)==1 printf(\"abs if a is 1\"); #endif return 0; } \u82e5\u53c2\u6570\u4e3a\u5728\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u5c06\u65e0\u6cd5\u6b63\u786e\u8bfb\u53d6\uff0c\u88ab\u8bc6\u522b\u4e3a0 #include <stdio.h> #define ABS(x) (((x)>0)?(x):-(x)) int a=-1; int main() { #if ABS(a)==1 printf(\"abs if a is 1\"); #elif ABS(a)==0 printf(\"abs if a is 0\"); //executed #endif return 0; } \u9884\u5b9a\u4e49\u5b8f #include <stdio.h> int main() { printf(\"%s %s %d %s %s\",__DATE__,__FILE__,__LINE__,__TIME__,__FUNCTION__); //\u5c06\u8f93\u51fa \u5f53\u524d\u65e5\u671f\uff0c\u6e90\u6587\u4ef6\u8def\u5f84\u548c\u540d\u79f0\uff0c\u884c\u53f7\uff0c\u5f53\u524d\u65f6\u95f4\uff0c\u51fd\u6570\u540d return 0; } exit() \u9000\u51fa\u7a0b\u5e8f exit(); \u53ef\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\uff0c\u5728\u4e3b\u7a0b\u5e8f\u4e2d\uff0c\u6548\u679c\u4e0ereturn\u7c7b\u4f3c\uff0c\u800c\u5728\u8c03\u7528\u7684\u51fd\u6570\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\u800c\u975e\u8fd4\u56de\u3002 #include <stdio.h> #include <stdlib.h> //exit()\u51fd\u6570\u9700\u8981\u7684\u5934\u6587\u4ef6 void work(){ printf(\"message from work 1\\n\"); exit(0); printf(\"message from work 2\\n\"); } int main(){ work(); printf(\"message from main\\n\"); } \u4f2a\u968f\u673a\u6570 \u7ebf\u6027\u540c\u4f59\u6cd5\uff1a $$ a_0=seed, a_n=(A\\times a_{n+1}+B)\\%M. $$ A,B,M = RAND_MAX \u662f\u4ea7\u751f\u5668\u8bbe\u5b9a\u7684\u5e38\u6570\u3002 \u8bbe\u5b9a\u79cd\u5b50\uff1a srand(time(NULL)); //\u7528\u65f6\u95f4\u505a\u79cd\u5b50\uff0c\u4fdd\u8bc1\u6bcf\u6b21\u8fd0\u884c\u65f6\u4e0d\u540c srand(a); //\u4f7f\u7528\u56fa\u5b9a\u7684\u79cd\u5b50\uff0c\u751f\u6210\u7684\u5e8f\u5217\u662f\u56fa\u5b9a\u7684","title":"Try something in C"},{"location":"C-notes/try-something-in-c/#try-something-in-c","text":"\u4e00\u4e9b\u503c\u5f97\u5c1d\u8bd5\u7684\u4ee3\u7801 \ud83d\udc49 Welcome to my C programming notes! This is a collection of interesting C code snippets and concepts I've gathered. Feel free to explore, learn, and experiment with these examples. This page is being continuously updated, so be sure to check back often for new content! If you have any questions, suggestions, or want to discuss any of these topics further, please don't hesitate to make a comment or reach out to me. Your input is valuable and appreciated!","title":"Try something in C"},{"location":"C-notes/try-something-in-c/#basics","text":"","title":"Basics"},{"location":"C-notes/try-something-in-c/#_1","text":"","title":"\u7279\u6b8a\u7684\u5b57\u7b26"},{"location":"C-notes/try-something-in-c/#_2","text":"#include<stdio.h> int main(){ printf(\"\\a\"); return 0; }","title":"\u54cd\u94c3\u7b26\uff0c\u5728\u5916\u90e8\u7ec8\u7aef\u8fd0\u884c\u65f6\u4f1a\u53d1\u51fa\u58f0\u97f3\ud83d\udd14"},{"location":"C-notes/try-something-in-c/#b","text":"\u5b9e\u73b0\u767e\u5206\u6bd4\u4ece0\u53d8\u5316\u5230100\uff1a #include <stdio.h> #include <windows.h> int main(){ printf(\" 0%%\"); for (int i = 1; i <= 100; i++) { printf(\"\\b\\b\\b\\b\"); printf(\"%3d%%\",i); Sleep(100); } return 0; }","title":"'\\b' \u56de\u9000\u5149\u6807"},{"location":"C-notes/try-something-in-c/#float-double","text":"\u8ba1\u7b97\u673a\u4ee5\u4e8c\u8fdb\u5236\u5b58\u50a8\u5c0f\u6570\uff0c\u5c0f\u6570\u70b9\u540e\u7684\u90e8\u5206\u4ee52\u7684\u8d1f\u6307\u6570\u5f62\u5f0f\u5b58\u50a8\uff0c\u4e00\u4e9b\u6709\u9650\u7684\u5341\u8fdb\u5236\u5c0f\u6570\u5c31\u53d8\u6210\u4e86\u65e0\u9650\u5faa\u73af\u5c0f\u6570\uff0c\u65e0\u6cd5\u51c6\u786e\u5b58\u50a8\u3002 #include<stdio.h> int main(){ for (float i = 0; i < 100; i+=1) { printf(\"%10.20f\\n\", i/100); } return 0; } \u53c2\u8003\uff1a\u5c0f\u6570\u7684\u8fdb\u5236\u8f6c\u6362\u4ee3\u7801 \u94fe\u63a5 \u26a0\ufe0f float \u548c double \u4e0d\u80fd\u8fdb\u884c\u4f4d\u8fd0\u7b97\u548c\u53d6\u6a21\uff08\u6216\u88ab\u53d6\u6a21\uff09\u64cd\u4f5c","title":"float \u548c double \u5e76\u975e\u51c6\u786e\u503c"},{"location":"C-notes/try-something-in-c/#0","text":"#include<stdio.h> int main(){ char str[10]=\"world\"; char str2[10]=\"\"; for (int i = 0; i < 10; i++) { if(str[i]=='\\0'){ printf(\"\\\\0 \"); } else{ printf(\"%c \",str[i]); } } printf(\"\\n\"); for (int i = 0; i < 10; i++) { if(str2[i]=='\\0'){ printf(\"\\\\0 \"); } else{ printf(\"%c \",str2[i]); } } return 0; }","title":"\u5b57\u7b26\u4e32\u672b\u5c3e\u90fd\u662f\u7a7a\u5b57\u7b26 \u2018\\0\u2019"},{"location":"C-notes/try-something-in-c/#_3","text":"#include<stdio.h> int main(){ while(1){ short a; scanf(\"%hd\",&a); for (int i = 15; i >=0; i--) { printf(\"%d\",a>>i&1); if(i==8)printf(\" \"); } printf(\"\\n\"); } return 0; }","title":"\u8f93\u51fa\u4e00\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\uff08\u662f\u8865\u7801\uff09"},{"location":"C-notes/try-something-in-c/#for","text":"for ( a ; b ; c ) { ... } \u5f53 b \u4e3a\u7a7a\u65f6\uff0c\u76f8\u5f53\u4e8e\u586b\u5165\u4e86\u975e\u7a7a\u5e38\u91cf\uff0c\u5373\u5faa\u73af\u5c06\u4e00\u76f4\u8fdb\u884c\uff08\u9664\u975e\u9047\u5230\u8f6c\u79fb\u8bed\u53e5\uff09 a c \u4e3a\u7a7a\u65f6\uff0c\u5c06\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c","title":"\u5e26\u6709\u7a7a\u8bed\u53e5\u7684for"},{"location":"C-notes/try-something-in-c/#scanf","text":"","title":"scanf \u7684\u683c\u5f0f\u63a7\u5236"},{"location":"C-notes/try-something-in-c/#_4","text":"\u4ee5\u4e0b\u7684\u8868\u8fbe\u5168\u90fd\u7b49\u4ef7 scanf(\"%s%s\",&a,&b); scanf(\"%s %s\",&a,&b); scanf(\"%s\\n%s\",&a,&b); scanf(\"%s\\t%s\",&a,&b); scanf(\"%s\\n \\t\\n\\t %s\",&a,&b); \u7a7a\u767d\u5b57\u7b26: \\n \\t ' ' \u7684\u4f5c\u7528\u90fd\u76f8\u540c\uff0c\u8fde\u7eed\u7684\u7a7a\u767d\u5b57\u7b26\u5c06\u88ab\u89c6\u4e3a\u4e00\u5904\u3002 scanf \u8bfb\u53d6\u6570\u5b57\uff0c\u5b57\u7b26\u4e32\u65f6\u4f1a\u81ea\u52a8\u8df3\u8fc7\u7a7a\u767d\u5b57\u7b26\u3002 \u26a0\ufe0f \u5f53\u8bfb\u53d6 %c \u65f6\uff0c\u7a7a\u767d\u5b57\u7b26\u53ef\u7528\u4e8e\u8df3\u8fc7\u8f93\u5165\u4e2d\u7684\u7a7a\u767d\u5b57\u7b26 e.g. \u8f93\u5165 a b : scanf(\"%c%c\",&a,&b); //a='a', b=' ' scanf(\"%c %c\",&a,&b); //a='a', b='b' \u4e0e\u5176\u4ed6\u8f93\u5165\u65b9\u5f0f\u6df7\u7528\uff0ce.g. input: hello world #include <stdio.h> int main() { char a[100],b[100]; scanf(\"%s\",a); gets(b); printf(\"%s\",b); return 0; } \u6539\u4e3a scanf(\"%s \",a); ,b=\u201dworld\u201d","title":"\u7a7a\u767d\u5b57\u7b26"},{"location":"C-notes/try-something-in-c/#_5","text":"#include <stdio.h> char a[100],b[100]; int main() { int success; success=scanf(\"%s and %s\",a,b); printf(\"%s %s\",a,b); return 0; } \u8868\u8fbe\u5f0f\u52a0\u5165\u4e86\u666e\u901a\u5b57\u7b26\uff0c\u5fc5\u987b\u8f93\u5165 abcde and fghij \u624d\u80fd\u6b63\u786e\u8f93\u5165a\u548cb","title":"\u666e\u901a\u5b57\u7b26"},{"location":"C-notes/try-something-in-c/#_6","text":"#include <stdio.h> char a,b; int main() { scanf(\"%c %*s %c\",&a,&b); printf(\"%c %c\",a,b); return 0; } input a bcdef g output a g","title":"\u8d4b\u503c\u7981\u6b62\u5b57\u7b26 *"},{"location":"C-notes/try-something-in-c/#_7","text":"#include <stdio.h> char a[100],b[100]; int main() { scanf(\"%5s%5s\",a,b); printf(\"%s %s\",a,b); return 0; } input abcdefghijklmnopqrstuvwxyz output abcde fghij","title":"\u6307\u5b9a\u6700\u5927\u57df\u5bbd"},{"location":"C-notes/try-something-in-c/#variables-and-pointers","text":"","title":"Variables and pointers"},{"location":"C-notes/try-something-in-c/#_8","text":"#include <stdio.h> short a=0x12345678; int main() { printf(\"%x\" ,a); return 0; }","title":"\u53d8\u91cf\u88ab\u8d4b\u7ed9\u8d85\u51fa\u8303\u56f4\u7684\u503c\uff0c\u81ea\u52a8\u53d6\u6a21"},{"location":"C-notes/try-something-in-c/#_9","text":"#include <stdio.h> int main() { for (int i = 0; i < 10; ++i) { for (int i = 0; i < 10; ++i) { printf(\"%d \",i); } printf(\"\\n\"); } return 0; }","title":"\u5185\u5c42\u53d8\u91cf\u4e0e\u5916\u5c42\u53d8\u91cf\u91cd\u540d\uff0c\u5916\u5c42\u7684\u53d8\u91cf\u88ab\u5c4f\u853d"},{"location":"C-notes/try-something-in-c/#_10","text":"#include <stdio.h> int main() { int i=10; int i=20; return 0; } error: redeclaration of 'int i' **#include <stdio.h> int main() { int i=10; { int i=20; printf(\"%d\\n\",i); } printf(\"%d\",i); return 0; }** \u7528\u4ee3\u7801\u5757\u5c31\u53ef\u5b9a\u4e49\u5185\u5c42\u540c\u540d\u53d8\u91cf\u3002","title":"\u5728\u540c\u4e00\u5c42\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a\u91cd\u540d\u53d8\u91cf\u4f1a\u62a5\u9519"},{"location":"C-notes/try-something-in-c/#static","text":"#include <stdio.h> int main() { for (int i = 0; i < 10; ++i) { static int a=0; //\u4e0b\u6b21\u6267\u884c\u5230\u8fd9\u91cc\uff0c\u76f4\u63a5\u8df3\u8fc7\u8fd9\u6761\u8bed\u53e5 printf(\"%d \",a); a++; } return 0; } \u5b9e\u9645\u4e0a\uff0cstatic\u53d8\u91cf\u5728\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\u5c31\u5df2\u7ecf\u521d\u59cb\u5316\u3002\u4f46\u82e5\u5728\u5b9a\u4e49\u4e4b\u524d\u5f15\u7528\uff0c\u5219\u4f1a\u62a5\u9519\u3002 static\u53d8\u91cf\u7684\u751f\u547d\u671f\u4e0e\u5168\u5c40\u53d8\u91cf\u76f8\u540c\uff0c\u800c\u4f5c\u7528\u57df\u4e0e\u5c40\u90e8\u53d8\u91cf\u76f8\u540c\u3002 #include <stdio.h> int main() { printf(\"hi\"); //\u8bbe\u7f6e\u65ad\u70b9\uff0c\u89c2\u5bdf\u5230\u663e\u793ax=100 static int x=100; return 0; }","title":"static \u53d8\u91cf\u521d\u59cb\u5316\u53ea\u6267\u884c\u4e00\u6b21"},{"location":"C-notes/try-something-in-c/#_11","text":"method 1: #include <stdio.h> int main() { char *s1=\"hello\"; //\u5b57\u7b26\u4e32\u5b58\u50a8\u5728\u5e38\u91cf\u533a\uff0c\u5730\u5740\u8d4b\u7ed9s1\uff0cs1\u662f\u6307\u9488\u53d8\u91cf printf(\"%s \",s1); printf(\"%c \",*(s1+1)); printf(\"%c \",s1[2]); s1=\"world\"; //s1\u6307\u5411\u53e6\u4e00\u5b57\u7b26\u4e32\u5e38\u91cf printf(\"%s \",s1); return 0; } s1\u53ef\u4fee\u6539\uff0c\u5b57\u7b26\u4e32\u4e0d\u51c6\u66f4\u6539 method 2: #include <stdio.h> int main() { char s1[]=\"hello\"; //\u5b57\u7b26\u4e32\u5b58\u50a8\u5728\u53d8\u91cf\u533a\uff0cs1\u4e3a\u6307\u9488\u5e38\u91cf\uff0c\u6307\u5411\u5b57\u7b26\u4e32 printf(\"%s \",s1); printf(\"%c \",*(s1+1)); printf(\"%c \",s1[2]); s1[4]='0'; //\u66f4\u6539\u5b57\u7b26\u4e32 printf(\"%s \",s1); return 0; } \u5b57\u7b26\u4e32\u53ef\u4fee\u6539\uff0cs1\u4e0d\u53ef\u4fee\u6539","title":"\u4e24\u79cd\u5b9a\u4e49\u5b57\u7b26\u4e32\u7684\u65b9\u6cd5"},{"location":"C-notes/try-something-in-c/#_12","text":"int * const p;//\u6307\u5411\u6574\u578b\u53d8\u91cf\u7684\u5e38\u6307\u9488 const int * const p; //\u6307\u5411\u6574\u578b\u5e38\u91cf\u7684\u5e38\u6307\u9488 \u26a0\ufe0f const int *p \u5b9a\u4e49\u7684\u662f\u6307\u5411\u6574\u578b\u5e38\u91cf\u7684\u6307\u9488\u53d8\u91cf\uff0c\u6574\u578b\u5e38\u91cf\u672c\u8eab\u4e0d\u80fd\u4fee\u6539\uff0c\u4f46\u6307\u9488\u53ef\u4ee5\u4fee\u6539\uff0c\u6307\u5411\u5176\u4ed6\u5730\u5740\u3002\u4f8b\u5982\uff0c\u4ee5\u4e0b\u7684\u8fd9\u6bb5\u4ee3\u7801\u80fd\u591f\u6b63\u5e38\u8fd0\u884c\uff1a #include <stdio.h> int main() { const char *p=\"12345\"; p++; printf(\"%c\",*p); return 0; }","title":"\u5b9a\u4e49\u5e38\u6307\u9488"},{"location":"C-notes/try-something-in-c/#void","text":"void\u6307\u9488\u53ef\u4ee5\u6307\u5411\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5982\u679c\u8981\u5c06void\u6307\u9488p\u8d4b\u7ed9\u5176\u4ed6\u7c7b\u578b\u7684\u6307\u9488\uff0c\u5219\u9700\u8981\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u3002 void\u6307\u9488\u4e0d\u5e94\u7528\u4e8e\u8ba1\u7b97\uff0c\u5426\u5219\u5c06\u6536\u5230\u8b66\u544a #include <stdio.h> int a[]={1,2,3,4,5,6,7,8,9,10}; int *p=a; void *q=a; //\u65e0\u7c7b\u578b\u6307\u9488 int main(){ printf(\"*p=%d *q=%d\\n\",*p,*(int *)q); return 0; } \u5404\u6307\u9488\u6240\u5360\u7684\u7a7a\u95f4: #include <stdio.h> int *p1; char *p2; double *p3; void *p4; //char\uff0a\u548cvoid\uff0a\u6307\u5411\u7a7a\u95f4\u5747\u4e3a1byte int a[10][10]; int main(){ printf(\"%d %d %d %d %d\\n\",(p1+1)-p1,(p2+1)-p2,(p3+1)-p3,(a+1)-a,(a[0]+1)-a[0]); printf(\"%d %d %d %d %d %d\",(int)((char*)(p1+1)-(char*)p1),(char*)(p2+1)-(char*)p2,(char*)(p3+1)-(char*)p3,(char*)(p4+1)-(char*)p4,(char*)(a+1)-(char*)a,(char*)(a[0]+1)-(char*)a[0]); return 0; } \u8f93\u51fa\uff1a 1 1 1 1 1 4 1 8 1 40 4","title":"\u65e0\u7c7b\u578b\u6307\u9488 void *"},{"location":"C-notes/try-something-in-c/#_13","text":"int (*p[10])[20]; //p\u662f\u957f\u5ea6\u4e3a\u5341\u7684\u6307\u9488\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6307\u9488\u6307\u5411\u957f\u5ea6\u4e3a20\u7684\u6574\u6570\u6570\u7ec4 int (*p[10])(int,int); //p \u662f\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6307\u5411\u4e00\u4e2a\u51fd\u6570\u7684\u6307\u9488\uff0c\u8fd9\u4e9b\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a int \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a int \u7c7b\u578b\u7684\u503c\u3002 int (*p(int))[10]; //p \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a int \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5305\u542b 10 \u4e2a int \u7c7b\u578b\u5143\u7d20\u7684\u6570\u7ec4\u7684\u6307\u9488\u3002 int *p(int)[10]; //p \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a int \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b 10 \u4e2a\u6307\u5411 int \u7c7b\u578b\u7684\u6307\u9488\u7684\u6570\u7ec4\u3002 int (*p(int))(int *,int); //p \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u6536\u4e00\u4e2aint\u578b\u53c2\u6570\uff0c\u8fd4\u56de\u503c\u4e3a\u51fd\u6570\u6307\u9488 int *(*p[10])(int,int); //\u6307\u5411\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a int \u7c7b\u578b\u7684\u6307\u9488\u3002 int (*p[10])(int,int)[5]; //\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b 5 \u4e2a int \u7c7b\u578b\u5143\u7d20\u7684\u6570\u7ec4\u3002 int *(*p[10])(int,int)[5]; //\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b 5 \u4e2a int \u6307\u9488\u5143\u7d20\u7684\u6570\u7ec4\u3002 int (*(*p[10])(int,int))[5]; //\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u957f\u5ea6\u4e3a 5 \u7684 int \u6570\u7ec4\u7684\u6307\u9488\u3002 int (*p)(char (*)(int *)); //p\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u53d7 int * \u7c7b\u578b\u53c2\u6570\u5e76\u8fd4\u56de char \u7c7b\u578b\u503c\u7684\u51fd\u6570\u6307\u9488","title":"\u590d\u6742\u7684\u6307\u9488\u58f0\u660e"},{"location":"C-notes/try-something-in-c/#_14","text":"\u5373\u53ef\u76f4\u63a5\u8c03\u7528 p(...) \uff0c\u4e5f\u53ef\u95f4\u63a5\u8bbf\u95ee (*p)(...) #include <stdio.h> void hello(int x){ printf(\"hello, %d\\n\",x); } void (*pf)(int)=hello; int main() { pf(1); (*pf)(2); return 0; } \u2139\ufe0f \u95f4\u63a5\u8bbf\u95ee\u65f6\uff0c\u7531\u4e8e\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\uff0c *pf \u5468\u56f4\u9700\u8981\u6dfb\u52a0\u62ec\u53f7","title":"\u51fd\u6570\u6307\u9488\u7684\u8c03\u7528"},{"location":"C-notes/try-something-in-c/#realloc","text":"\u5f53\u4e00\u4e2a\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u9700\u8981\u66f4\u5927\u7684\u8fde\u7eed\u5b58\u50a8\u7a7a\u95f4\u65f6\uff0c\u7528 void * realloc(void *ptr, size_t newsize) \u5c06\u5f53\u524d\u5185\u5b58\u5757\u590d\u5236\u5230\u66f4\u5927\u7a7a\u95f4\u3002 \u529f\u80fd\uff1a\u5148\u5224\u65ad\u5f53\u524d\u7684\u6307\u9488\u662f\u5426\u6709\u8db3\u591f\u7684\u8fde\u7eed\u7a7a\u95f4\uff0c\u5982\u679c\u6709\uff0c\u6269\u5927ptr\u6307\u5411\u7684\u5730\u5740\uff0c\u5e76\u4e14\u5c06ptr\u8fd4\u56de\uff0c\u5982\u679c\u7a7a\u95f4\u4e0d\u591f\uff0c\u5148\u6309\u7167newsize\u6307\u5b9a\u7684\u5927\u5c0f\u5206\u914d\u7a7a\u95f4\uff0c\u5c06\u539f\u6709\u6570\u636e\u4ece\u5934\u5230\u5c3e\u62f7\u8d1d\u5230\u65b0\u5206\u914d\u7684\u5185\u5b58\u533a\u57df\uff0c\u800c\u540e\u91ca\u653e\u539f\u6765ptr\u6240\u6307\u5185\u5b58\u533a\u57df\uff08\u539f\u6765\u6307\u9488\u662f\u81ea\u52a8\u91ca\u653e\uff09\uff0c\u540c\u65f6\u8fd4\u56de\u65b0\u5206\u914d\u7684\u5185\u5b58\u533a\u57df\u7684\u9996\u5730\u5740\u3002\u5373\u91cd\u65b0\u5206\u914d\u5b58\u50a8\u5668\u5757\u7684\u5730\u5740\u3002","title":"realloc()"},{"location":"C-notes/try-something-in-c/#array","text":"","title":"Array"},{"location":"C-notes/try-something-in-c/#_15","text":"#include<stdio.h> int main(){ int n; scanf(\"%d\",&n); int a[n]; for (int i = 0; i < n; i++) { printf(\"%d \",a[i]); } } a[n]\u5fc5\u987b\u662f \u5c40\u90e8\u53d8\u91cf \uff0c\u82e5\u5728\u5168\u5c40\u5b9a\u4e49\uff0c\u4f1a\u62a5\u9519 variably modified 'a' at file scope #include<stdio.h> int n=10; //\u5728c\u4e2d\uff0c\u5373\u4f7f\u6539\u4e3aconst int \u4e5f\u4f1a\u62a5\u9519\uff0c\u6539\u4e3acpp\u6587\u4ef6\u540e\u6b63\u5e38 int a[n]; int main(){ for (int i = 0; i < n; i++) { printf(\"%d \",a[i]); } }","title":"\u5f00\u4e00\u4e2a\u957f\u5ea6\u4e3a\u53d8\u91cf\u7684\u6570\u7ec4"},{"location":"C-notes/try-something-in-c/#_16","text":"#include <stdio.h> int main() { int s[2][3]={{1,3,5}, {2,4,6}}; for (int i = 0; i < 6; i++){ printf(\"%d \",s[0][i]); //s[0]\u8d85\u51fa\u540e\u8fdb\u5165s[1] } }","title":"\u4e8c\u7ef4\u6570\u7ec4\u6240\u5360\u5185\u5b58\u662f\u8fde\u7eed\u7684"},{"location":"C-notes/try-something-in-c/#_17","text":"#include<stdio.h> int a[100]; int main(){ for (int i = 0; i < 100; i++) { printf(\"%d \",a[i]); } } \u7ed3\u679c\u5168\u4e3a 0 #include<stdio.h> int main(){ int a[100]; for (int i = 0; i < 100; i++) { printf(\"%d \",a[i]); } } \u7ed3\u679c\u4e3a\u4e71\u4e03\u516b\u7cdf\u7684\u6570","title":"\u5c40\u90e8\u53d8\u91cf\u662f\u672a\u7ecf\u521d\u59cb\u5316\u7684\uff0c\u5168\u5c40\u53d8\u91cf\u88ab\u521d\u59cb\u5316\u4e3a\u96f6\u3002"},{"location":"C-notes/try-something-in-c/#_18","text":"","title":"\u6570\u7ec4\u7684\u521d\u59cb\u5316"},{"location":"C-notes/try-something-in-c/#_19","text":"#include <stdio.h> int main(){ int arr[5] = {}; // Initialize all elements to 0 for(int i = 0; i < 5; i++){ printf(\"%d \", arr[i]); } return 0; } \u4f7f\u7528\u7a7a\u767d\u5217\u8868 {} \u53ef\u4ee5\u5c06\u5c40\u90e8\u6570\u7ec4\u7684\u6240\u6709\u5143\u7d20\u521d\u59cb\u5316\u4e3a0\u3002\u8fd9\u6bd4\u624b\u52a8\u521d\u59cb\u5316\u6bcf\u4e2a\u5143\u7d20\u66f4\u65b9\u4fbf\u3002","title":"\u7528\u7a7a\u767d\u5217\u8868\u521d\u59cb\u5316\u5c40\u90e8\u6570\u7ec4"},{"location":"C-notes/try-something-in-c/#_20","text":"\u53ea\u6709\u6570\u7ec4\u7684\u7b2c\u4e00\u7ef4\u5927\u5c0f\u53ef\u4ee5\u4e0d\u586b\uff0c\u81ea\u52a8\u786e\u5b9a\u3002 int A[][]={{1,2,3},{4,5,6},{7,8,9}}; //\u9519\u8bef int A[3][]={{1,2,3},{4,5,6},{7,8,9}}; //\u9519\u8bef int A[][3]={{1,2,3},{4,5,6},{7,8,9}}; //\u6b63\u786e \u521d\u59cb\u5316\u7684\u987a\u5e8f: Cross then down \u27a1\ufe0f\u2199\ufe0f\u27a1\ufe0f #include <stdio.h> int main() { int A[3][3] = {1, 2, 3, 4, 5, 6, 7}; for (int i = 0; i < 3; i++) { for (int j = 0; j < 3; j++) { printf(\"%d \", A[i][j]); } printf(\"\\n\"); } return 0; } \u800c int A[3][3] = {{1, 2, 3, 4}}; \u4f1a\u56e0\u8d85\u51fa\u957f\u5ea6\u62a5\u9519","title":"\u90e8\u5206\u521d\u59cb\u5316\u6570\u7ec4"},{"location":"C-notes/try-something-in-c/#_21","text":"\u26a0\ufe0f \u7ecf\u8fc7\u6211\u7684\u6d4b\u8bd5\uff0c\u4f7f\u7528\u672c\u8282\u7684\u65b9\u6cd5\uff0c\u5728windows\u4e2d\u7684gcc\u3001msvc\u8fd0\u884c\u5747\u4f1a\u62a5\u9519\uff0clinux\u4e0b\u7684gcc\u80fd\u591f\u6b63\u5e38\u8fd0\u884c \u4f8b\u5982 int arr[8] = {[3]=4}; \u4e5f\u53ef\u6df7\u5408\u4f7f\u7528\uff08\u4ed4\u7ec6\u89c2\u5bdf\u6b64\u65f6\u521d\u59cb\u5316\u7684\u987a\u5e8f\uff09 #include <stdio.h> //\u8bfe\u672c\u4f8b\u9898 int main() { int arr[8] = {1,[3]=4,[1]=2,6,[6]=7,8}; for (int i = 0; i < 8; i++) { printf(\"%d \",arr[i]); } return 0; } \u987a\u5e8f\uff1a\u5f53\u672a\u6307\u5b9a\u4e0b\u6807\u65f6\uff0c\u5c06\u521d\u59cb\u5316\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 \u82e5\u4e00\u4e2a\u5143\u7d20\u88ab\u591a\u6b21\u521d\u59cb\u5316\uff0c\u6700\u7ec8\u7684\u503c\u4e3a\u6700\u540e\u4e00\u6b21\u7684\u7ed3\u679c\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4e5f\u53ef\u4ee5 #include <stdio.h> int main() { int arr[5][5] = {[2] = {[3] = 8}}; for (int i = 0; i < 5; i++) { for (int j = 0; j < 5; j++) { printf(\"%d \", arr[i][j]); } printf(\"\\n\"); } return 0; }","title":"\u521d\u59cb\u5316\u6307\u5b9a\u4e0b\u6807\u7684\u5143\u7d20"},{"location":"C-notes/try-something-in-c/#structure","text":"","title":"Structure"},{"location":"C-notes/try-something-in-c/#enum","text":"","title":"\u679a\u4e3e Enum"},{"location":"C-notes/try-something-in-c/#_22","text":"enum {SUN,MON,TUE,WED,THU,FRI,SAT}week1,week2; //\u5b9a\u4e49\u4e86\u4e24\u4e2a\u679a\u4e3e\u53d8\u91cf \u7531\u4e8e\u6ca1\u6709\u540d\u79f0\uff0c\u65e0\u6cd5\u5f15\u7528\uff0c\u4e0d\u80fd\u518d\u5b9a\u4e49\u66f4\u591a\u8fd9\u79cd\u7c7b\u578b\u7684\u679a\u4e3e\u53d8\u91cf","title":"\u4e0d\u51fa\u73b0\u679a\u4e3e\u540d"},{"location":"C-notes/try-something-in-c/#_23","text":"enum week{SUN,MON,TUE,WED=0,THU,FRI,SAT}; \u503c\u5206\u522b\u4e3a 0 1 2 0 1 2 3 4","title":"\u6307\u5b9a\u679a\u4e3e\u6570\u503c\u65f6\u91cd\u590d"},{"location":"C-notes/try-something-in-c/#_24","text":"#include <stdio.h> enum week{SUN,MON,TUE,WED,THU,FRI,SAT=10}; int main() { enum week week1; week1=6; return 0; } week \u7684\u503c\u4e0d\u80fd\u4e3a6 error: invalid conversion from 'int' to 'week' [-fpermissive]","title":"\u5f53\u679a\u4e3e\u7684\u6570\u503c\u4e0d\u8fde\u7eed\u65f6\u679a\u4e3e\u53d8\u91cf\u7684\u8303\u56f4"},{"location":"C-notes/try-something-in-c/#_25","text":"\u8054\u5408\u53ef\u4ee5\u5c06\u540c\u4e00\u6bb5\u5b58\u50a8\u7a7a\u95f4\u4ee5\u591a\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5b58\u53d6\uff1b\u5b57\u6bb5\u53ef\u4ee5\u5c06\u4e00\u6bb5\u5185\u5b58\u6309\u4f4d\u5bbd\u62c6\u5206\u3002 \ud83d\udca1\u53ef\u4ee5\u5229\u7528\u8054\u5408\u4e0e\u5b57\u6bb5\u7b80\u4fbf\u7684\u5b9e\u73b001\u7684\u679a\u4e3e\uff1a #include <stdio.h> union selection{ struct { unsigned a: 1; unsigned b: 1; unsigned c: 1; unsigned d: 1; }; unsigned D; }e; int main(){ for (e.D=0; e.D<0xf; e.D++){ printf(\"a:%d b:%d c:%d d:%d\\n\",e.a,e.b,e.c,e.d); } return 0; } \u5b57\u6bb5\u4e0d\u80fd\u8de8\u8d8a\u4e00\u4e2a\u5b57\u7684\u8fb9\u754c #include <stdio.h> union selection{ struct { unsigned short a: 1; unsigned short b: 16; //\u5b58\u5728\u4e0b\u4e00\u4e2a\u5b57\u4e2d }; unsigned long long D; }e; int main() { e.a=1; e.b=1; printf(\"%x\",e.D); return 0; }","title":"\u8054\u5408\u4e0e\u5b57\u6bb5"},{"location":"C-notes/try-something-in-c/#function","text":"","title":"Function"},{"location":"C-notes/try-something-in-c/#_26","text":"#include <stdio.h> void printab(int a,int b){ printf(\"%d %d\",a,b); } int main() { int a=0; printab(a,a++); return 0; } \u6216\u8005\uff0c #include <stdio.h> int main() { int a=0; printf(\"%d %d\",a,a++); return 0; }","title":"\u5b9e\u53c2\u6c42\u503c\u987a\u5e8f\u7531\u7f16\u8bd1\u5668\u51b3\u5b9a"},{"location":"C-notes/try-something-in-c/#_27","text":"#include <stdio.h> #include <stdarg.h> int my_max(int n, ...){ int ans=-2147483648; va_list a; va_start(a,n); for (int i = 0; i < n; i++) { int tmp=va_arg(a,int); if(tmp >= ans) ans=tmp; } va_end(a); return ans; } int main(){ int a,b,c; scanf(\"%d%d%d\",&a,&b,&c); printf(\"max of abc is: %d\\n\",my_max(3,a,b,c)); return 0; } C++ \u98ce\u683c\uff1a #include <iostream> #include <initializer_list> using namespace std; int my_max(initializer_list<int>arr){ int ans=INT32_MIN; for (auto i = arr.begin(); i!=arr.end() ; i++){ ans=max(ans,*i); } return ans; } int main() { int a,b,c; cin>>a>>b>>c; cout<<my_max({a,b,c}); return 0; }","title":"\u53c2\u6570\u6570\u76ee\u53ef\u53d8\u7684\u51fd\u6570"},{"location":"C-notes/try-something-in-c/#miscellaneous","text":"","title":"Miscellaneous"},{"location":"C-notes/try-something-in-c/#_28","text":"","title":"\u5b8f"},{"location":"C-notes/try-something-in-c/#_29","text":"\u91cd\u590d\u5b9a\u4e49\u5b8f\u65f6\uff0c\u7f16\u8bd1\u9884\u5904\u7406\u65f6\u4ece\u5934\u5230\u5c3e\u987a\u5e8f\u64cd\u4f5c\uff0c\u5373\u6bcf\u4e2a\u4f4d\u7f6ea\u7684\u503c\u4e3a\u4e0a\u4e00\u6b21\u5b9a\u4e49\u7684\u503c\uff0c\u4f46\u4f1a\u6536\u5230\u4e00\u6761\u8b66\u544a #include <stdio.h> #define a 1 int x = 1; int main() { #if a printf(\"a != %d\\n\", a);//\u6267\u884c #define a 10 #else printf(\"a == 0\\n\"); #endif #if a == 10 printf(\"a == %d\\n\", a);//\u6267\u884c #else printf(\"a != 10\\n\"); #endif return 0; }","title":"\u6761\u4ef6\u7f16\u8bd1"},{"location":"C-notes/try-something-in-c/#if","text":"if \u53ef\u4ee5\u63a5\u4e00\u4e9b\u8868\u8fbe\u5f0f\uff0c\u6216\u662f\u5b8f\u5b9a\u4e49\u7684\u201c\u51fd\u6570\u201d\uff0c\u4f46\u662f\u6b64\u65f6\u4f20\u5165\u7684\u5b9e\u53c2\u5fc5\u987b\u5728\u5b8f\u4e2d\u5b9a\u4e49 #include <stdio.h> #define ABS(x) (((x)>0)?(x):-(x)) #define a -1 int main() { #if ABS(a)==1 printf(\"abs if a is 1\"); #endif return 0; } \u82e5\u53c2\u6570\u4e3a\u5728\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u5c06\u65e0\u6cd5\u6b63\u786e\u8bfb\u53d6\uff0c\u88ab\u8bc6\u522b\u4e3a0 #include <stdio.h> #define ABS(x) (((x)>0)?(x):-(x)) int a=-1; int main() { #if ABS(a)==1 printf(\"abs if a is 1\"); #elif ABS(a)==0 printf(\"abs if a is 0\"); //executed #endif return 0; }","title":"if \u63a7\u5236"},{"location":"C-notes/try-something-in-c/#_30","text":"#include <stdio.h> int main() { printf(\"%s %s %d %s %s\",__DATE__,__FILE__,__LINE__,__TIME__,__FUNCTION__); //\u5c06\u8f93\u51fa \u5f53\u524d\u65e5\u671f\uff0c\u6e90\u6587\u4ef6\u8def\u5f84\u548c\u540d\u79f0\uff0c\u884c\u53f7\uff0c\u5f53\u524d\u65f6\u95f4\uff0c\u51fd\u6570\u540d return 0; }","title":"\u9884\u5b9a\u4e49\u5b8f"},{"location":"C-notes/try-something-in-c/#exit","text":"exit(); \u53ef\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\uff0c\u5728\u4e3b\u7a0b\u5e8f\u4e2d\uff0c\u6548\u679c\u4e0ereturn\u7c7b\u4f3c\uff0c\u800c\u5728\u8c03\u7528\u7684\u51fd\u6570\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u9000\u51fa\u7a0b\u5e8f\u800c\u975e\u8fd4\u56de\u3002 #include <stdio.h> #include <stdlib.h> //exit()\u51fd\u6570\u9700\u8981\u7684\u5934\u6587\u4ef6 void work(){ printf(\"message from work 1\\n\"); exit(0); printf(\"message from work 2\\n\"); } int main(){ work(); printf(\"message from main\\n\"); }","title":"exit() \u9000\u51fa\u7a0b\u5e8f"},{"location":"C-notes/try-something-in-c/#_31","text":"\u7ebf\u6027\u540c\u4f59\u6cd5\uff1a $$ a_0=seed, a_n=(A\\times a_{n+1}+B)\\%M. $$ A,B,M = RAND_MAX \u662f\u4ea7\u751f\u5668\u8bbe\u5b9a\u7684\u5e38\u6570\u3002 \u8bbe\u5b9a\u79cd\u5b50\uff1a srand(time(NULL)); //\u7528\u65f6\u95f4\u505a\u79cd\u5b50\uff0c\u4fdd\u8bc1\u6bcf\u6b21\u8fd0\u884c\u65f6\u4e0d\u540c srand(a); //\u4f7f\u7528\u56fa\u5b9a\u7684\u79cd\u5b50\uff0c\u751f\u6210\u7684\u5e8f\u5217\u662f\u56fa\u5b9a\u7684","title":"\u4f2a\u968f\u673a\u6570"},{"location":"C-notes/vscode-for-cpp/","text":"VS Code Portable for C++ \ud83d\udd2e \"The right tools make the magic happen.\" Try out my portable, self-contained VS Code C++ programming environment . Equipped with a built-in MinGW compiler and meticulously configured settings and debugging options, it\u2019s ready to use straight out of the box on your Windows PC. This setup eliminates the hassle of environment configuration while offering the modern features and convenience of Visual Studio Code. It's especially useful on public PCs, letting you carry your familiar setup wherever you go. Platform: Windows 10 and later Usage: Download VSCode-portable-for-cpp.7z, extract the archive to any folder and run Start.bat to launch. Download \ud83d\udcbe Download archive here . \u2601\ufe0f Alternative source OneDrive Gitee \ud83d\udce2 Release Page","title":"VS Code Portable for C++"},{"location":"C-notes/vscode-for-cpp/#vs-code-portable-for-c","text":"\ud83d\udd2e \"The right tools make the magic happen.\" Try out my portable, self-contained VS Code C++ programming environment . Equipped with a built-in MinGW compiler and meticulously configured settings and debugging options, it\u2019s ready to use straight out of the box on your Windows PC. This setup eliminates the hassle of environment configuration while offering the modern features and convenience of Visual Studio Code. It's especially useful on public PCs, letting you carry your familiar setup wherever you go. Platform: Windows 10 and later Usage: Download VSCode-portable-for-cpp.7z, extract the archive to any folder and run Start.bat to launch.","title":"VS Code Portable for C++"},{"location":"C-notes/vscode-for-cpp/#download","text":"\ud83d\udcbe Download archive here . \u2601\ufe0f Alternative source OneDrive Gitee \ud83d\udce2 Release Page","title":"Download"},{"location":"Deep-Learning/pytorch/","text":"Deep learning with PyTorch PyTorch is an open-source machine learning library developed by Facebook's AI Research lab (FAIR). It is widely used for applications such as natural language processing and computer vision. To embark on the journey of learning PyTorch, you can start with my fork of pytorch-learning . It is a set of jupyter notebooks with key pytorch knowledge with rich instances and detailed explanations.","title":"Deep learning with PyTorch"},{"location":"Deep-Learning/pytorch/#deep-learning-with-pytorch","text":"PyTorch is an open-source machine learning library developed by Facebook's AI Research lab (FAIR). It is widely used for applications such as natural language processing and computer vision. To embark on the journey of learning PyTorch, you can start with my fork of pytorch-learning . It is a set of jupyter notebooks with key pytorch knowledge with rich instances and detailed explanations.","title":"Deep learning with PyTorch"},{"location":"Linux/","text":"Set up Linux Choose your favorite distro \u4f5c\u4e3a\u5f00\u6e90\u7cfb\u7edf\uff0cLinux\u6709\u8bf8\u591a\u53d1\u884c\u7248\u672c\u3002\u9009\u62e9\u4f60\u559c\u6b22\u7684\u7248\u672c\u6216\u6700\u53d7\u6b22\u8fce\u7684\u7248\u672c\uff08\u5982Ubuntu, \u66f4\u5bb9\u6613\u89e3\u51b3\u9047\u5230\u7684\u95ee\u9898\uff09\u5373\u53ef\u3002 \u9009\u62e9\u684c\u9762\u73af\u5883 \u684c\u9762\u73af\u5883\u5373\u662f\u4f60\u5c06\u76f4\u63a5\u770b\u5230\u7684\u56fe\u5f62\u754c\u9762\u3002\u65e0\u8bba\u9009\u62e9\u4f55\u79cd\u53d1\u884c\u7248\u672c\uff0cKDE\u548cGnome\u90fd\u662f\u6700\u53d7\u6b22\u8fce\u7684\u9009\u9879\u3002\u6bd4\u8f83\u5b83\u4eec\u4e0d\u540c\u7684\u98ce\u683c\u505a\u51fa\u9009\u62e9\u3002\u684c\u9762\u73af\u5883\u53ef\u4ee5\u5728\u5b89\u88c5\u540e\u66f4\u6362\u3002 Start installation \u5236\u4f5c\u5b89\u88c5\u4ecb\u8d28 \u5728\u5b98\u65b9\u7f51\u7ad9\u6216\u955c\u50cf\u7ad9\uff08\u6e05\u534e\u6e90\uff1ahttps://mirrors.tuna.tsinghua.edu.cn\uff09\u4e0b\u8f7diso\u6620\u50cf\u6587\u4ef6 iso\u6587\u4ef6\u5206\u4e3a\u5728\u7ebf\u5b89\u88c5\u7248\u548c\u79bb\u7ebf\u5b89\u88c5\u7248\u3002 - \u5728\u7ebf\u5b89\u88c5\u7248\u4f53\u79ef\u8f83\u5c0f\uff0c\u5b89\u88c5\u65f6\u9009\u9879\u8f83\u591a\uff0c\u4f46\u8981\u6c42\u5b89\u88c5\u65f6\u8054\u7f51\u3002\u800c\u4e14\u7531\u4e8e\u4f60\u9700\u8981\u5728\u8fdb\u5165\u7cfb\u7edf\u524d\u8054\u7f51\uff0c\u4f60\u4e0d\u80fd\u8fdb\u884c\u590d\u6742\u7684\u8bbe\u7f6e\uff0c\u5f88\u53ef\u80fd\u9700\u8981\u6709\u7ebf\u7f51\u7edc\u8fde\u63a5\u3002 - \u79bb\u7ebf\u5b89\u88c5\u7248\u4f53\u79ef\u8f83\u5927\uff0c\u4e0b\u8f7d\u65f6\u53ef\u80fd\u9700\u8981\u9009\u62e9\u76f8\u5e94\u7684\u684c\u9762\u73af\u5883\uff0c\u4ecd\u7136\u5efa\u8bae\u5b89\u88c5\u65f6\u8054\u7f51\u4ee5\u4fbf\u83b7\u53d6\u66f4\u65b0\u3001\u914d\u7f6e\u6e90\u4ee5\u53ca\u5b89\u88c5\u989d\u5916\u8f6f\u4ef6\u3002 \u51c6\u5907\u4e00\u4e2a\u81f3\u5c118GB\u7684U\u76d8\uff0c\u4e0b\u8f7d\u523b\u5f55\u5de5\u5177\uff08\u514d\u8d39\u514d\u5b89\u88c5\u7684rufus\uff1a https://rufus.ie/\uff09 \u9009\u62e9U\u76d8\u548c\u521a\u4e0b\u8f7d\u7684iso\u6587\u4ef6\uff0c\u70b9\u51fb\u5f00\u59cb\uff0c\u7a0d\u7b49\u7247\u523b\uff0c\u5f53\u8fdb\u5ea6\u6761\u663e\u793aready\u65f6\u5236\u4f5c\u5b8c\u6210\uff0c\u5f39\u51faU\u76d8\u3002 Install neccessary software \u26a0\ufe0f \u4ee5\u4e0b\u5b89\u88c5\u8f6f\u4ef6\u7684\u547d\u4ee4\u57fa\u4e8eapt\u5305\u7ba1\u7406\u5668\uff0c\u9002\u7528\u4e8edebian, ubuntu, linuxmint\u7b49\uff0c\u5176\u4ed6\u7cfb\u7edf\u53ef\u80fd\u4f7f\u7528\u4e0d\u540c\u7684\u5305\u7ba1\u7406\u5668\uff0c\u547d\u4ee4\u548c\u5305\u540d\u79f0\u6709\u6240\u4e0d\u540c\uff0c\u9700\u67e5\u8be2\u3002 \u4e2d\u6587\u8f93\u5165\u6cd5 \u82e5\u7cfb\u7edf\u81ea\u5e26ibus\u6216\u65e7\u7248\u7684fcitx\uff0c\u5378\u8f7d\u7cfb\u7edf\u81ea\u5e26\u7684\u8f93\u5165\u6cd5 sudo apt purge fcitx* sudo apt purge ibus* sudo apt autoremove \u5b89\u88c5fcitx5\u62fc\u97f3\u8f93\u5165\u6cd5 sudo apt install fcitx5 fcitx5-pinyin fcitx5-config-qt \u8bbe\u7f6e\u4e3a\u9ed8\u8ba4 im-config -n fcitx5 \u4f7f\u66f4\u6539\u751f\u6548 source ~/.profile \u91cd\u65b0\u542f\u52a8\u540e\u624d\u53ef\u4ee5\u6210\u529f\u6253\u51fa\u6c49\u5b57 \u5f00\u673a\u81ea\u52a8\u6302\u8f7d\u78c1\u76d8 \u5f53\u4f60\u7684\u7cfb\u7edf\u6709\u591a\u4e2a\u786c\u76d8\u6216\u5206\u533a\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u5728\u5f00\u673a\u65f6\u81ea\u52a8\u6302\u8f7d\u5b83\u4eec\u3002Linux\u901a\u8fc7 /etc/fstab \u6587\u4ef6\u6765\u914d\u7f6e\u5f00\u673a\u81ea\u52a8\u6302\u8f7d\u3002 \u67e5\u770b\u786c\u76d8\u4fe1\u606f \u9996\u5148\u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u786c\u76d8\u548c\u5206\u533a\u4fe1\u606f lsblk \u6216\u8005\u67e5\u770bUUID\u4fe1\u606f\uff08\u63a8\u8350\u4f7f\u7528UUID\u6302\u8f7d\uff0c\u66f4\u7a33\u5b9a\uff09 sudo blkid \u521b\u5efa\u6302\u8f7d\u70b9 \u4e3a\u8981\u6302\u8f7d\u7684\u786c\u76d8\u521b\u5efa\u76ee\u5f55 sudo mkdir /mnt/data #data\u53ef\u6539\u4e3a\u4f60\u559c\u6b22\u7684\u786c\u76d8\u540d\u79f0 \u7f16\u8f91fstab\u6587\u4ef6 \u7f16\u8f91 /etc/fstab \u6587\u4ef6\u6765\u914d\u7f6e\u81ea\u52a8\u6302\u8f7d sudo nano /etc/fstab \u5728\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u6302\u8f7d\u914d\u7f6e\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a UUID=your-disk-uuid /mnt/data ext4 defaults 0 2 \u53c2\u6570\u8bf4\u660e\uff1a - UUID=your-disk-uuid : \u786c\u76d8\u7684UUID\uff08\u4eceblkid\u547d\u4ee4\u83b7\u53d6\uff09 - /mnt/data : \u6302\u8f7d\u70b9\u8def\u5f84\uff0c\u5e94\u4e0e\u4e4b\u524d\u521b\u5efa\u7684\u76ee\u5f55\u4e00\u81f4 - ext4 : \u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff08\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u53ef\u80fd\u662fntfs\u3001fat32\u7b49\uff0c\u4f46\u5efa\u8bae\u5c06\u786c\u76d8\u683c\u5f0f\u5316\u4e3aext4\uff09 - defaults : \u6302\u8f7d\u9009\u9879 - 0 : dump\u9009\u9879\uff08\u901a\u5e38\u4e3a0\uff09 - 2 : fsck\u68c0\u67e5\u987a\u5e8f\uff08\u6839\u5206\u533a\u4e3a1\uff0c\u5176\u4ed6\u4e3a2\uff0c\u4e0d\u68c0\u67e5\u4e3a0\uff09 \u6d4b\u8bd5\u6302\u8f7d\u914d\u7f6e \u4fdd\u5b58\u6587\u4ef6\u540e\uff0c\u6d4b\u8bd5\u914d\u7f6e\u662f\u5426\u6b63\u786e sudo mount -a \u5982\u679c\u6ca1\u6709\u9519\u8bef\u4fe1\u606f\uff0c\u8bf4\u660e\u914d\u7f6e\u6b63\u786e\u3002\u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u6302\u8f7d\u72b6\u6001\uff1a df -h \u91cd\u542f\u7cfb\u7edf\u540e\uff0c\u786c\u76d8\u5c06\u81ea\u52a8\u6302\u8f7d\u5230\u6307\u5b9a\u4f4d\u7f6e\u3002 winscp (optional) \u4f7f\u7528\u4f60\u7684windows\u7535\u8111\u67e5\u770b/linux\u4e0a\u7684\u6587\u4ef6\uff0c\u6216\u5c06\u65b0\u7684\u6587\u4ef6\u590d\u5236\u8fdb\u6765\u3002 \u63a5\u4e0b\u6765\u9700\u8981\u8fdb\u5165\u5230Ubuntu\u4e2d\uff0c\u67e5\u770b\u4e00\u4e0b\u662f\u5426\u5f00\u542fOpenSSH\u670d\u52a1 sudo systemctl status ssh \u5982\u679c\u672a\u5b89\u88c5ssh\uff0c\u9700\u8981\u5b89\u88c5ssh\u670d\u52a1 sudo apt install openssh-server \u5b89\u88c5\u540e\uff0c\u542f\u52a8ssh\u670d\u52a1 sudo systemctl start ssh \u7136\u540e\u518d\u68c0\u67e5\u4e00\u4e0bssh\u670d\u52a1\u72b6\u6001\uff0c\u663e\u793aactive\u5c31\u8bf4\u660e\u5df2\u7ecf\u5b89\u88c5\u6210\u529f \u6b64\u65f6\u4ecewindows\u7aefWinSCP\u65b0\u5efa\u8fde\u63a5\uff0c\u9009\u62e9SFTP\u534f\u8bae\uff0c\u8f93\u5165linux\u8bbe\u5907\u7684ip\u548c\u7528\u6237\u540d\u5bc6\u7801\u5373\u53ef\u8fdb\u5165linux\u6587\u4ef6\u7cfb\u7edf\u3002 Handling problems \u754c\u9762\u663e\u793a\u5f02\u5e38 \u7761\u7720\u5524\u9192\u540e\u5c4f\u5e55\u753b\u9762\u6495\u88c2\u6216\u82b1\u5c4f\uff0c\u91cd\u542f\u663e\u793a\u7ba1\u7406\u5668\uff1a \u60f3\u529e\u6cd5\u8fdb\u5165\u7ec8\u7aef\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e4b\u4e00\uff1a #KDE \u901a\u5e38\u91c7\u7528SDDM\uff1a sudo systemctl restart sddm #Gnome \u901a\u5e38\u91c7\u7528GDM sudo systemctl restart gdm #\u5176\u4ed6\u53ef\u80fd\u91c7\u7528lightdm sudo systemctl restart lightdm","title":"Set up Linux"},{"location":"Linux/#set-up-linux","text":"","title":"Set up Linux"},{"location":"Linux/#choose-your-favorite-distro","text":"\u4f5c\u4e3a\u5f00\u6e90\u7cfb\u7edf\uff0cLinux\u6709\u8bf8\u591a\u53d1\u884c\u7248\u672c\u3002\u9009\u62e9\u4f60\u559c\u6b22\u7684\u7248\u672c\u6216\u6700\u53d7\u6b22\u8fce\u7684\u7248\u672c\uff08\u5982Ubuntu, \u66f4\u5bb9\u6613\u89e3\u51b3\u9047\u5230\u7684\u95ee\u9898\uff09\u5373\u53ef\u3002","title":"Choose your favorite distro"},{"location":"Linux/#_1","text":"\u684c\u9762\u73af\u5883\u5373\u662f\u4f60\u5c06\u76f4\u63a5\u770b\u5230\u7684\u56fe\u5f62\u754c\u9762\u3002\u65e0\u8bba\u9009\u62e9\u4f55\u79cd\u53d1\u884c\u7248\u672c\uff0cKDE\u548cGnome\u90fd\u662f\u6700\u53d7\u6b22\u8fce\u7684\u9009\u9879\u3002\u6bd4\u8f83\u5b83\u4eec\u4e0d\u540c\u7684\u98ce\u683c\u505a\u51fa\u9009\u62e9\u3002\u684c\u9762\u73af\u5883\u53ef\u4ee5\u5728\u5b89\u88c5\u540e\u66f4\u6362\u3002","title":"\u9009\u62e9\u684c\u9762\u73af\u5883"},{"location":"Linux/#start-installation","text":"","title":"Start installation"},{"location":"Linux/#_2","text":"\u5728\u5b98\u65b9\u7f51\u7ad9\u6216\u955c\u50cf\u7ad9\uff08\u6e05\u534e\u6e90\uff1ahttps://mirrors.tuna.tsinghua.edu.cn\uff09\u4e0b\u8f7diso\u6620\u50cf\u6587\u4ef6 iso\u6587\u4ef6\u5206\u4e3a\u5728\u7ebf\u5b89\u88c5\u7248\u548c\u79bb\u7ebf\u5b89\u88c5\u7248\u3002 - \u5728\u7ebf\u5b89\u88c5\u7248\u4f53\u79ef\u8f83\u5c0f\uff0c\u5b89\u88c5\u65f6\u9009\u9879\u8f83\u591a\uff0c\u4f46\u8981\u6c42\u5b89\u88c5\u65f6\u8054\u7f51\u3002\u800c\u4e14\u7531\u4e8e\u4f60\u9700\u8981\u5728\u8fdb\u5165\u7cfb\u7edf\u524d\u8054\u7f51\uff0c\u4f60\u4e0d\u80fd\u8fdb\u884c\u590d\u6742\u7684\u8bbe\u7f6e\uff0c\u5f88\u53ef\u80fd\u9700\u8981\u6709\u7ebf\u7f51\u7edc\u8fde\u63a5\u3002 - \u79bb\u7ebf\u5b89\u88c5\u7248\u4f53\u79ef\u8f83\u5927\uff0c\u4e0b\u8f7d\u65f6\u53ef\u80fd\u9700\u8981\u9009\u62e9\u76f8\u5e94\u7684\u684c\u9762\u73af\u5883\uff0c\u4ecd\u7136\u5efa\u8bae\u5b89\u88c5\u65f6\u8054\u7f51\u4ee5\u4fbf\u83b7\u53d6\u66f4\u65b0\u3001\u914d\u7f6e\u6e90\u4ee5\u53ca\u5b89\u88c5\u989d\u5916\u8f6f\u4ef6\u3002 \u51c6\u5907\u4e00\u4e2a\u81f3\u5c118GB\u7684U\u76d8\uff0c\u4e0b\u8f7d\u523b\u5f55\u5de5\u5177\uff08\u514d\u8d39\u514d\u5b89\u88c5\u7684rufus\uff1a https://rufus.ie/\uff09 \u9009\u62e9U\u76d8\u548c\u521a\u4e0b\u8f7d\u7684iso\u6587\u4ef6\uff0c\u70b9\u51fb\u5f00\u59cb\uff0c\u7a0d\u7b49\u7247\u523b\uff0c\u5f53\u8fdb\u5ea6\u6761\u663e\u793aready\u65f6\u5236\u4f5c\u5b8c\u6210\uff0c\u5f39\u51faU\u76d8\u3002","title":"\u5236\u4f5c\u5b89\u88c5\u4ecb\u8d28"},{"location":"Linux/#install-neccessary-software","text":"\u26a0\ufe0f \u4ee5\u4e0b\u5b89\u88c5\u8f6f\u4ef6\u7684\u547d\u4ee4\u57fa\u4e8eapt\u5305\u7ba1\u7406\u5668\uff0c\u9002\u7528\u4e8edebian, ubuntu, linuxmint\u7b49\uff0c\u5176\u4ed6\u7cfb\u7edf\u53ef\u80fd\u4f7f\u7528\u4e0d\u540c\u7684\u5305\u7ba1\u7406\u5668\uff0c\u547d\u4ee4\u548c\u5305\u540d\u79f0\u6709\u6240\u4e0d\u540c\uff0c\u9700\u67e5\u8be2\u3002","title":"Install neccessary software"},{"location":"Linux/#_3","text":"\u82e5\u7cfb\u7edf\u81ea\u5e26ibus\u6216\u65e7\u7248\u7684fcitx\uff0c\u5378\u8f7d\u7cfb\u7edf\u81ea\u5e26\u7684\u8f93\u5165\u6cd5 sudo apt purge fcitx* sudo apt purge ibus* sudo apt autoremove \u5b89\u88c5fcitx5\u62fc\u97f3\u8f93\u5165\u6cd5 sudo apt install fcitx5 fcitx5-pinyin fcitx5-config-qt \u8bbe\u7f6e\u4e3a\u9ed8\u8ba4 im-config -n fcitx5 \u4f7f\u66f4\u6539\u751f\u6548 source ~/.profile \u91cd\u65b0\u542f\u52a8\u540e\u624d\u53ef\u4ee5\u6210\u529f\u6253\u51fa\u6c49\u5b57","title":"\u4e2d\u6587\u8f93\u5165\u6cd5"},{"location":"Linux/#_4","text":"\u5f53\u4f60\u7684\u7cfb\u7edf\u6709\u591a\u4e2a\u786c\u76d8\u6216\u5206\u533a\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u5728\u5f00\u673a\u65f6\u81ea\u52a8\u6302\u8f7d\u5b83\u4eec\u3002Linux\u901a\u8fc7 /etc/fstab \u6587\u4ef6\u6765\u914d\u7f6e\u5f00\u673a\u81ea\u52a8\u6302\u8f7d\u3002","title":"\u5f00\u673a\u81ea\u52a8\u6302\u8f7d\u78c1\u76d8"},{"location":"Linux/#_5","text":"\u9996\u5148\u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u786c\u76d8\u548c\u5206\u533a\u4fe1\u606f lsblk \u6216\u8005\u67e5\u770bUUID\u4fe1\u606f\uff08\u63a8\u8350\u4f7f\u7528UUID\u6302\u8f7d\uff0c\u66f4\u7a33\u5b9a\uff09 sudo blkid","title":"\u67e5\u770b\u786c\u76d8\u4fe1\u606f"},{"location":"Linux/#_6","text":"\u4e3a\u8981\u6302\u8f7d\u7684\u786c\u76d8\u521b\u5efa\u76ee\u5f55 sudo mkdir /mnt/data #data\u53ef\u6539\u4e3a\u4f60\u559c\u6b22\u7684\u786c\u76d8\u540d\u79f0","title":"\u521b\u5efa\u6302\u8f7d\u70b9"},{"location":"Linux/#fstab","text":"\u7f16\u8f91 /etc/fstab \u6587\u4ef6\u6765\u914d\u7f6e\u81ea\u52a8\u6302\u8f7d sudo nano /etc/fstab \u5728\u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0\u6302\u8f7d\u914d\u7f6e\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a UUID=your-disk-uuid /mnt/data ext4 defaults 0 2 \u53c2\u6570\u8bf4\u660e\uff1a - UUID=your-disk-uuid : \u786c\u76d8\u7684UUID\uff08\u4eceblkid\u547d\u4ee4\u83b7\u53d6\uff09 - /mnt/data : \u6302\u8f7d\u70b9\u8def\u5f84\uff0c\u5e94\u4e0e\u4e4b\u524d\u521b\u5efa\u7684\u76ee\u5f55\u4e00\u81f4 - ext4 : \u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\uff08\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u53ef\u80fd\u662fntfs\u3001fat32\u7b49\uff0c\u4f46\u5efa\u8bae\u5c06\u786c\u76d8\u683c\u5f0f\u5316\u4e3aext4\uff09 - defaults : \u6302\u8f7d\u9009\u9879 - 0 : dump\u9009\u9879\uff08\u901a\u5e38\u4e3a0\uff09 - 2 : fsck\u68c0\u67e5\u987a\u5e8f\uff08\u6839\u5206\u533a\u4e3a1\uff0c\u5176\u4ed6\u4e3a2\uff0c\u4e0d\u68c0\u67e5\u4e3a0\uff09","title":"\u7f16\u8f91fstab\u6587\u4ef6"},{"location":"Linux/#_7","text":"\u4fdd\u5b58\u6587\u4ef6\u540e\uff0c\u6d4b\u8bd5\u914d\u7f6e\u662f\u5426\u6b63\u786e sudo mount -a \u5982\u679c\u6ca1\u6709\u9519\u8bef\u4fe1\u606f\uff0c\u8bf4\u660e\u914d\u7f6e\u6b63\u786e\u3002\u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u6302\u8f7d\u72b6\u6001\uff1a df -h \u91cd\u542f\u7cfb\u7edf\u540e\uff0c\u786c\u76d8\u5c06\u81ea\u52a8\u6302\u8f7d\u5230\u6307\u5b9a\u4f4d\u7f6e\u3002","title":"\u6d4b\u8bd5\u6302\u8f7d\u914d\u7f6e"},{"location":"Linux/#winscp-optional","text":"\u4f7f\u7528\u4f60\u7684windows\u7535\u8111\u67e5\u770b/linux\u4e0a\u7684\u6587\u4ef6\uff0c\u6216\u5c06\u65b0\u7684\u6587\u4ef6\u590d\u5236\u8fdb\u6765\u3002 \u63a5\u4e0b\u6765\u9700\u8981\u8fdb\u5165\u5230Ubuntu\u4e2d\uff0c\u67e5\u770b\u4e00\u4e0b\u662f\u5426\u5f00\u542fOpenSSH\u670d\u52a1 sudo systemctl status ssh \u5982\u679c\u672a\u5b89\u88c5ssh\uff0c\u9700\u8981\u5b89\u88c5ssh\u670d\u52a1 sudo apt install openssh-server \u5b89\u88c5\u540e\uff0c\u542f\u52a8ssh\u670d\u52a1 sudo systemctl start ssh \u7136\u540e\u518d\u68c0\u67e5\u4e00\u4e0bssh\u670d\u52a1\u72b6\u6001\uff0c\u663e\u793aactive\u5c31\u8bf4\u660e\u5df2\u7ecf\u5b89\u88c5\u6210\u529f \u6b64\u65f6\u4ecewindows\u7aefWinSCP\u65b0\u5efa\u8fde\u63a5\uff0c\u9009\u62e9SFTP\u534f\u8bae\uff0c\u8f93\u5165linux\u8bbe\u5907\u7684ip\u548c\u7528\u6237\u540d\u5bc6\u7801\u5373\u53ef\u8fdb\u5165linux\u6587\u4ef6\u7cfb\u7edf\u3002","title":"winscp (optional)"},{"location":"Linux/#handling-problems","text":"","title":"Handling problems"},{"location":"Linux/#_8","text":"\u7761\u7720\u5524\u9192\u540e\u5c4f\u5e55\u753b\u9762\u6495\u88c2\u6216\u82b1\u5c4f\uff0c\u91cd\u542f\u663e\u793a\u7ba1\u7406\u5668\uff1a \u60f3\u529e\u6cd5\u8fdb\u5165\u7ec8\u7aef\uff0c\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u4e4b\u4e00\uff1a #KDE \u901a\u5e38\u91c7\u7528SDDM\uff1a sudo systemctl restart sddm #Gnome \u901a\u5e38\u91c7\u7528GDM sudo systemctl restart gdm #\u5176\u4ed6\u53ef\u80fd\u91c7\u7528lightdm sudo systemctl restart lightdm","title":"\u754c\u9762\u663e\u793a\u5f02\u5e38"},{"location":"Web/JavaScript/","text":"JavaScript \ud83d\udcdc Reference ES6 Tutorial MDN web docs Deciding let or var let is block-scoped and should be used in modern JavaScript for variable declarations. It prevents issues like variable hoisting and accidental re-declarations. var is function-scoped and declarations are hoisted to the top of their scope, meaning you can use a var variable before its declaration in the code (though it will have a value of undefined). It is generally avoided in modern code due to its less predictable behavior. Prefer let or const over var : let and const provide better scope management and are more explicit about variable mutability (whether the value can be changed). for(let v=0;v<5;v++){ setTimeout(() => { console.log(v); }, 1000); } output: 0 1 2 3 4 for(var v=0;v<5;v++){ setTimeout(() => { console.log(v); }, 1000); } output: 5 5 5 5 5 type JavaScript uses dynamic typing. Variable's type is set when you assign a value to it and be automatically coverted during operations. You cannot explicitly assign types to variables. ( TypeScript can do that!) \ud83e\udde9 Dynamic typing provides convenience and flexibility but may also lead to confusion. Some TypeScript will be used in this document to annotate types to make it clearer. Checking types use typeof variable to check the type. console.log(typeof 10) // number console.log(typeof \"10\") // string console.log(typeof true) // boolean console.log(typeof undefined) // undefined console.log(typeof null) // object let a=\"10\" let b=10 console.log(typeof a) // string console.log(typeof b) // number console.log(typeof (a+b)) // string console.log(typeof (a-b)) // number == and === compared == performs type coercion , meaning it converts the operands to the same type before comparing. === is a strict equality operator that compares both value and type, making it more predictable and preferred in most cases. Array Arrays in JavaScript are used to store multiple values in a single variable. They are zero-indexed and come with built-in methods like push , pop , map , filter , and reduce for manipulation. JavaScript arrays are resizable and can contain a mix of different data types . (When those characteristics are undesirable, use typed arrays instead.) Create Creating an array with size 10: let a=Array(10); // array of 10 empty slots let b=Array(10).fill(0); // array of 10 zeros a=Array(10) is the same as: let a=[]; a.length=10; //a.fill(0) won't work here! Both ways create an array with 10 empty slots \u2014 not undefined, not null, just empty (sparse). Promise A JavaScript Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It's a way to handle operations that might take some time to complete, like fetching data from an API or reading a file. Here is an simple example: function judgeOddNumber(x: number) { return new Promise<string>((resolve, reject) => { if (x % 2 !== 0) { resolve(x+\" is odd number\"); //simulate success } else { reject(x+\" is even number\"); //simulate an error } }); } // const promise = hi; function successCallback(result: string) { console.log(`success: ${result}`); } function failureCallback(error: string) { console.error(`error: ${error}`); } judgeOddNumber(3).then(successCallback, failureCallback); judgeOddNumber(10).then(successCallback, failureCallback); Promise objects manage asynchronous execution flow based on operation outcomes. When the operation succeeds and resolve() is invoked, the Promise transitions to fulfilled state, executing the first callback passed to .then() (in this example, successCallback ). Conversely, when the operation fails and reject() is called, the Promise enters rejected state, triggering the second callback in .then() (here, failureCallback ). Creating a promise chain function addOne(x: number) { return new Promise<number>((resolve, reject) => { if (x > 0) resolve(x + 1); else reject(\"x is not positive\"); }); } function multiplyByTwo(x: number) { return new Promise<number>((resolve, reject) => { if (x > 0) resolve(x * 2); else reject(\"x is not positive\"); }); } function outputResult(result: number) { console.log(`The result is ${result}`); } function outputError(error: string) { console.error(`Error: ${error}`); } addOne(5).then(multiplyByTwo).then(addOne) .then(outputResult).catch(outputError); // (5+1)*2+1=13 addOne(-5).then(multiplyByTwo).then(addOne) .then(outputResult).catch(outputError); // Error then and catch You can use the second parameter of .then() or .catch() to handle errors. Use .catch() at the end of a chain to provide centralized error handling is cleaner and avoids repetitive error handling code. Use .then() with Two Parameters for Local Error Handling immediately within the same .then() . Priorty: - The first parameter of .then() (the success handler) has the highest priority. It is called if the Promise resolves successfully. - The second parameter of .then() (the failure handler) has the next highest priority. It is called if the Promise rejects and a failure handler is provided. - The trailing .catch() has the lowest priority. It is used to handle failures and catches errors from anywhere in the chain, including errors thrown in the success handlers of .then(). function output1() { console.log(\"output1!\"); } function output2() { console.log(\"output2!\"); } function output3() { console.log(\"output3!\"); } addOne(-5).then(output1, output2).catch(output3); // output2! Proccessing multiple promises JavaScript provides several methods to work with multiple Promises simultaneously. These methods allow you to manage and process asynchronous operations efficiently: let p1 = new Promise((resolve) => { setTimeout(() => { resolve(\"p1 resolved after 1 second\"); }, 1000); }); let p2 = new Promise((resolve, reject) => { setTimeout(() => { reject(\"p2 rejected after 2 seconds\"); }, 2000); }); let p3 = new Promise((resolve) => { setTimeout(() => { resolve(\"p3 resolved after 3 seconds\"); }, 3000); }); function rejected(s) { console.log(\"Promise rejected: \", s); } function resolved(s) { console.log(\"Promise rejected: \", s); } Promise.all([p1, p2, p3]).then(resolved, rejected); //p2 rejected after 2 seconds Promise.any([p1, p2, p3]).then(resolved, rejected); //p1 resolved after 1 second Promise.race([p1, p2, p3]).then(resolved, rejected); //p1 resolved after 1 second Promise.allSettled([p1, p2, p3]).then(resolved, rejected); /* Promise rejected: [ { status: 'fulfilled', value: 'p1 resolved after 1 second' }, { status: 'rejected', reason: 'p2 rejected after 2 seconds' }, { status: 'fulfilled', value: 'p3 resolved after 3 seconds' } ]*/ Summary JavaScript Promises offer several key benefits when dealing with asynchronous operations: 1. Improved Readability and Maintainability: flatten nested callback, avoid \"Callback Hell\" structures. chaining with .then() provides a clear, sequential flow for asynchronous operations. 2. Enhanced Error Handling: Centralized Error Catching with .catch() at the end Provide a consistent way to handle errors in asynchronous code. 3. Facilitates Asynchronous Code Management: Chain multiple asynchronous operations in a specific order. Parallel Execution (with Promise.all()): You can run multiple asynchronous tasks concurrently using Promise.all() and wait for all of them to resolve before proceeding. Allow for more flexible composition of asynchronous operations. 4. Integration with Modern Features: Foundation for the async/await syntax , which simplifies asynchronous code further. Event Loop If the code needs to perform asynchronous action, that halts the whole program\u2014the nature of JavaScript as a web scripting language requires it to be never blocking. Therefore, the code that handles the completion of that asynchronous action is defined as a callback. This callback defines a job, which gets placed into a job queue\u2014or, in HTML terminology, an event loop\u2014once the action is completed. Every time, the agent pulls a job from the queue and executes it. When the job is executed, it may create more jobs, which are added to the end of the queue. Jobs can also be added via the completion of asynchronous platform mechanisms, such as timers, I/O, and events. A job is considered completed when the stack is empty; then, the next job is pulled from the queue. Jobs might not be pulled with uniform priority\u2014for example, HTML event loops split jobs into two categories: tasks and microtasks. Microtasks have higher priority and the microtask queue is drained first before the task queue is pulled. For more information, check the HTML microtask guide. If the job queue is empty, the agent waits for more jobs to be added. Comparing Asynchronous APIs: Task vs Microtask Priority JavaScript has several ways to schedule asynchronous code execution, each with different priority levels in the event loop: console.log(\"Script start\"); setTimeout(() => console.log(\"setTimeout\"), 0); Promise.resolve() .then(() => console.log(\"Promise 1\")) .then(() => console.log(\"Promise 2\")); queueMicrotask(() => console.log(\"queueMicrotask\")); console.log(\"Script end\"); // Output: // Script start // Script end // Promise 1 // queueMicrotask // Promise 2 // setTimeout Priority Order (highest to lowest): Synchronous code : Always runs first and blocks execution until complete Example: console.log(\"Script start\") , console.log(\"Script end\") Microtasks : Run after synchronous code and before rendering or tasks Promise callbacks : .then() , .catch() , .finally() queueMicrotask() : Explicitly queue a function as a microtask MutationObserver callbacks : From DOM changes Tasks (Macrotasks) : Run after all microtasks are processed setTimeout/setInterval : Timer-based callbacks DOM event callbacks : User interactions (clicks, keyboard events) requestAnimationFrame : Visual updates (runs before rendering)","title":"JavaScript"},{"location":"Web/JavaScript/#javascript","text":"\ud83d\udcdc Reference ES6 Tutorial MDN web docs","title":"JavaScript"},{"location":"Web/JavaScript/#deciding-let-or-var","text":"let is block-scoped and should be used in modern JavaScript for variable declarations. It prevents issues like variable hoisting and accidental re-declarations. var is function-scoped and declarations are hoisted to the top of their scope, meaning you can use a var variable before its declaration in the code (though it will have a value of undefined). It is generally avoided in modern code due to its less predictable behavior. Prefer let or const over var : let and const provide better scope management and are more explicit about variable mutability (whether the value can be changed). for(let v=0;v<5;v++){ setTimeout(() => { console.log(v); }, 1000); } output: 0 1 2 3 4 for(var v=0;v<5;v++){ setTimeout(() => { console.log(v); }, 1000); } output: 5 5 5 5 5","title":"Deciding let or var"},{"location":"Web/JavaScript/#type","text":"JavaScript uses dynamic typing. Variable's type is set when you assign a value to it and be automatically coverted during operations. You cannot explicitly assign types to variables. ( TypeScript can do that!) \ud83e\udde9 Dynamic typing provides convenience and flexibility but may also lead to confusion. Some TypeScript will be used in this document to annotate types to make it clearer.","title":"type"},{"location":"Web/JavaScript/#checking-types","text":"use typeof variable to check the type. console.log(typeof 10) // number console.log(typeof \"10\") // string console.log(typeof true) // boolean console.log(typeof undefined) // undefined console.log(typeof null) // object let a=\"10\" let b=10 console.log(typeof a) // string console.log(typeof b) // number console.log(typeof (a+b)) // string console.log(typeof (a-b)) // number","title":"Checking types"},{"location":"Web/JavaScript/#and-compared","text":"== performs type coercion , meaning it converts the operands to the same type before comparing. === is a strict equality operator that compares both value and type, making it more predictable and preferred in most cases.","title":"== and === compared"},{"location":"Web/JavaScript/#array","text":"Arrays in JavaScript are used to store multiple values in a single variable. They are zero-indexed and come with built-in methods like push , pop , map , filter , and reduce for manipulation. JavaScript arrays are resizable and can contain a mix of different data types . (When those characteristics are undesirable, use typed arrays instead.)","title":"Array"},{"location":"Web/JavaScript/#create","text":"Creating an array with size 10: let a=Array(10); // array of 10 empty slots let b=Array(10).fill(0); // array of 10 zeros a=Array(10) is the same as: let a=[]; a.length=10; //a.fill(0) won't work here! Both ways create an array with 10 empty slots \u2014 not undefined, not null, just empty (sparse).","title":"Create"},{"location":"Web/JavaScript/#promise","text":"A JavaScript Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. It's a way to handle operations that might take some time to complete, like fetching data from an API or reading a file. Here is an simple example: function judgeOddNumber(x: number) { return new Promise<string>((resolve, reject) => { if (x % 2 !== 0) { resolve(x+\" is odd number\"); //simulate success } else { reject(x+\" is even number\"); //simulate an error } }); } // const promise = hi; function successCallback(result: string) { console.log(`success: ${result}`); } function failureCallback(error: string) { console.error(`error: ${error}`); } judgeOddNumber(3).then(successCallback, failureCallback); judgeOddNumber(10).then(successCallback, failureCallback); Promise objects manage asynchronous execution flow based on operation outcomes. When the operation succeeds and resolve() is invoked, the Promise transitions to fulfilled state, executing the first callback passed to .then() (in this example, successCallback ). Conversely, when the operation fails and reject() is called, the Promise enters rejected state, triggering the second callback in .then() (here, failureCallback ).","title":"Promise"},{"location":"Web/JavaScript/#creating-a-promise-chain","text":"function addOne(x: number) { return new Promise<number>((resolve, reject) => { if (x > 0) resolve(x + 1); else reject(\"x is not positive\"); }); } function multiplyByTwo(x: number) { return new Promise<number>((resolve, reject) => { if (x > 0) resolve(x * 2); else reject(\"x is not positive\"); }); } function outputResult(result: number) { console.log(`The result is ${result}`); } function outputError(error: string) { console.error(`Error: ${error}`); } addOne(5).then(multiplyByTwo).then(addOne) .then(outputResult).catch(outputError); // (5+1)*2+1=13 addOne(-5).then(multiplyByTwo).then(addOne) .then(outputResult).catch(outputError); // Error","title":"Creating a promise chain"},{"location":"Web/JavaScript/#then-and-catch","text":"You can use the second parameter of .then() or .catch() to handle errors. Use .catch() at the end of a chain to provide centralized error handling is cleaner and avoids repetitive error handling code. Use .then() with Two Parameters for Local Error Handling immediately within the same .then() . Priorty: - The first parameter of .then() (the success handler) has the highest priority. It is called if the Promise resolves successfully. - The second parameter of .then() (the failure handler) has the next highest priority. It is called if the Promise rejects and a failure handler is provided. - The trailing .catch() has the lowest priority. It is used to handle failures and catches errors from anywhere in the chain, including errors thrown in the success handlers of .then(). function output1() { console.log(\"output1!\"); } function output2() { console.log(\"output2!\"); } function output3() { console.log(\"output3!\"); } addOne(-5).then(output1, output2).catch(output3); // output2!","title":"then and catch"},{"location":"Web/JavaScript/#proccessing-multiple-promises","text":"JavaScript provides several methods to work with multiple Promises simultaneously. These methods allow you to manage and process asynchronous operations efficiently: let p1 = new Promise((resolve) => { setTimeout(() => { resolve(\"p1 resolved after 1 second\"); }, 1000); }); let p2 = new Promise((resolve, reject) => { setTimeout(() => { reject(\"p2 rejected after 2 seconds\"); }, 2000); }); let p3 = new Promise((resolve) => { setTimeout(() => { resolve(\"p3 resolved after 3 seconds\"); }, 3000); }); function rejected(s) { console.log(\"Promise rejected: \", s); } function resolved(s) { console.log(\"Promise rejected: \", s); } Promise.all([p1, p2, p3]).then(resolved, rejected); //p2 rejected after 2 seconds Promise.any([p1, p2, p3]).then(resolved, rejected); //p1 resolved after 1 second Promise.race([p1, p2, p3]).then(resolved, rejected); //p1 resolved after 1 second Promise.allSettled([p1, p2, p3]).then(resolved, rejected); /* Promise rejected: [ { status: 'fulfilled', value: 'p1 resolved after 1 second' }, { status: 'rejected', reason: 'p2 rejected after 2 seconds' }, { status: 'fulfilled', value: 'p3 resolved after 3 seconds' } ]*/","title":"Proccessing multiple promises"},{"location":"Web/JavaScript/#summary","text":"JavaScript Promises offer several key benefits when dealing with asynchronous operations: 1. Improved Readability and Maintainability: flatten nested callback, avoid \"Callback Hell\" structures. chaining with .then() provides a clear, sequential flow for asynchronous operations. 2. Enhanced Error Handling: Centralized Error Catching with .catch() at the end Provide a consistent way to handle errors in asynchronous code. 3. Facilitates Asynchronous Code Management: Chain multiple asynchronous operations in a specific order. Parallel Execution (with Promise.all()): You can run multiple asynchronous tasks concurrently using Promise.all() and wait for all of them to resolve before proceeding. Allow for more flexible composition of asynchronous operations. 4. Integration with Modern Features: Foundation for the async/await syntax , which simplifies asynchronous code further.","title":"Summary"},{"location":"Web/JavaScript/#event-loop","text":"If the code needs to perform asynchronous action, that halts the whole program\u2014the nature of JavaScript as a web scripting language requires it to be never blocking. Therefore, the code that handles the completion of that asynchronous action is defined as a callback. This callback defines a job, which gets placed into a job queue\u2014or, in HTML terminology, an event loop\u2014once the action is completed. Every time, the agent pulls a job from the queue and executes it. When the job is executed, it may create more jobs, which are added to the end of the queue. Jobs can also be added via the completion of asynchronous platform mechanisms, such as timers, I/O, and events. A job is considered completed when the stack is empty; then, the next job is pulled from the queue. Jobs might not be pulled with uniform priority\u2014for example, HTML event loops split jobs into two categories: tasks and microtasks. Microtasks have higher priority and the microtask queue is drained first before the task queue is pulled. For more information, check the HTML microtask guide. If the job queue is empty, the agent waits for more jobs to be added.","title":"Event Loop"},{"location":"Web/JavaScript/#comparing-asynchronous-apis-task-vs-microtask-priority","text":"JavaScript has several ways to schedule asynchronous code execution, each with different priority levels in the event loop: console.log(\"Script start\"); setTimeout(() => console.log(\"setTimeout\"), 0); Promise.resolve() .then(() => console.log(\"Promise 1\")) .then(() => console.log(\"Promise 2\")); queueMicrotask(() => console.log(\"queueMicrotask\")); console.log(\"Script end\"); // Output: // Script start // Script end // Promise 1 // queueMicrotask // Promise 2 // setTimeout","title":"Comparing Asynchronous APIs: Task vs Microtask Priority"},{"location":"Web/JavaScript/#priority-order-highest-to-lowest","text":"Synchronous code : Always runs first and blocks execution until complete Example: console.log(\"Script start\") , console.log(\"Script end\") Microtasks : Run after synchronous code and before rendering or tasks Promise callbacks : .then() , .catch() , .finally() queueMicrotask() : Explicitly queue a function as a microtask MutationObserver callbacks : From DOM changes Tasks (Macrotasks) : Run after all microtasks are processed setTimeout/setInterval : Timer-based callbacks DOM event callbacks : User interactions (clicks, keyboard events) requestAnimationFrame : Visual updates (runs before rendering)","title":"Priority Order (highest to lowest):"},{"location":"Web/TypeScript/","text":"TypeScript Learning TypeScript is the enhanced JavaScript. Overview Typescript is by Microsoft! TypeScript is a programming language that's a superset of JavaScript \u2014 building on top of it to add static typing so you can catch errors during development instead of at runtime. It was developed by Microsoft to address the difficulties of maintaining large applications written in JavaScript, and has been expanded to add a number of modern developer-friendly features. In addition to static typing, TypeScript also adds features like interfaces, generics, type inference, access modifiers, and other constructs not present in standard JavaScript. TypeScript compiles to plain JavaScript, so anything that works in JavaScript works in TypeScript, including third-party JavaScript libraries and any code you've already written in JavaScript. Advatages over JavaScript Static typing - improve readability and maintainability - early error detection - enhanced ide support // define a variable with optional type annotation let x: number =5; // x is of type number let y=10; // y is of type number (inferred) console.log(x+y); // 15 Beyond static typing, TypeScript introduces several other key differences and enhancements compared to standard JavaScript: Interfaces: TypeScript introduces interfaces, which are powerful tools for defining contracts or shapes for objects. This allows you to specify the properties and methods that an object must have. JavaScript doesn't have a built-in interface concept. Classes and Object-Oriented Programming: While JavaScript has classes (introduced in ES6), TypeScript enhances them with features like access modifiers ( public , private , protected ) and abstract classes, which provide more robust object-oriented programming capabilities. TypeScript's class system feels more like traditional object-oriented languages, which can be beneficial for developers coming from those backgrounds. Enums (Enumerations): TypeScript offers enums, which allow you to define sets of named constants. This can make your code more readable and maintainable, especially when dealing with a fixed set of values. JavaScript doesn't have built-in enums. Namespaces and Modules: TypeScript provides namespaces (though modules are now generally preferred) for organizing code and preventing naming collisions. TypeScript has a very robust module system that works well with modern javascript module approaches. While JavaScript has modules (ES modules), TypeScript's module system integrates seamlessly with its type system, providing better tooling and type checking. Decorators: TypeScript supports decorators, which are a way to add metadata and modify classes, methods, or properties. They are often used in frameworks like Angular. Decorators are still an experimental feature in JavaScript. Generics: TypeScript's generics allow you to create reusable components that work with a variety of types. This enhances code flexibility and reduces code duplication. While Javascript can create very flexible code, generics improve the type safety of that code. Type Inference: While you can explicitly annotate types, TypeScript also has powerful type inference capabilities. It can often automatically determine the type of a variable or expression, reducing the need for explicit annotations. This makes typescript feel less verbose than some other strongly typed languages. Improved DOM Manipulation: TypeScript provides type definitions for the DOM, making it easier and safer to work with HTML elements. This reduces the risk of runtime errors when manipulating the DOM.","title":"TypeScript Learning"},{"location":"Web/TypeScript/#typescript-learning","text":"TypeScript is the enhanced JavaScript.","title":"TypeScript Learning"},{"location":"Web/TypeScript/#overview","text":"Typescript is by Microsoft! TypeScript is a programming language that's a superset of JavaScript \u2014 building on top of it to add static typing so you can catch errors during development instead of at runtime. It was developed by Microsoft to address the difficulties of maintaining large applications written in JavaScript, and has been expanded to add a number of modern developer-friendly features. In addition to static typing, TypeScript also adds features like interfaces, generics, type inference, access modifiers, and other constructs not present in standard JavaScript. TypeScript compiles to plain JavaScript, so anything that works in JavaScript works in TypeScript, including third-party JavaScript libraries and any code you've already written in JavaScript.","title":"Overview"},{"location":"Web/TypeScript/#advatages-over-javascript","text":"Static typing - improve readability and maintainability - early error detection - enhanced ide support // define a variable with optional type annotation let x: number =5; // x is of type number let y=10; // y is of type number (inferred) console.log(x+y); // 15 Beyond static typing, TypeScript introduces several other key differences and enhancements compared to standard JavaScript: Interfaces: TypeScript introduces interfaces, which are powerful tools for defining contracts or shapes for objects. This allows you to specify the properties and methods that an object must have. JavaScript doesn't have a built-in interface concept. Classes and Object-Oriented Programming: While JavaScript has classes (introduced in ES6), TypeScript enhances them with features like access modifiers ( public , private , protected ) and abstract classes, which provide more robust object-oriented programming capabilities. TypeScript's class system feels more like traditional object-oriented languages, which can be beneficial for developers coming from those backgrounds. Enums (Enumerations): TypeScript offers enums, which allow you to define sets of named constants. This can make your code more readable and maintainable, especially when dealing with a fixed set of values. JavaScript doesn't have built-in enums. Namespaces and Modules: TypeScript provides namespaces (though modules are now generally preferred) for organizing code and preventing naming collisions. TypeScript has a very robust module system that works well with modern javascript module approaches. While JavaScript has modules (ES modules), TypeScript's module system integrates seamlessly with its type system, providing better tooling and type checking. Decorators: TypeScript supports decorators, which are a way to add metadata and modify classes, methods, or properties. They are often used in frameworks like Angular. Decorators are still an experimental feature in JavaScript. Generics: TypeScript's generics allow you to create reusable components that work with a variety of types. This enhances code flexibility and reduces code duplication. While Javascript can create very flexible code, generics improve the type safety of that code. Type Inference: While you can explicitly annotate types, TypeScript also has powerful type inference capabilities. It can often automatically determine the type of a variable or expression, reducing the need for explicit annotations. This makes typescript feel less verbose than some other strongly typed languages. Improved DOM Manipulation: TypeScript provides type definitions for the DOM, making it easier and safer to work with HTML elements. This reduces the risk of runtime errors when manipulating the DOM.","title":"Advatages over JavaScript"},{"location":"Web/node/","text":"Node.js \u5728\u5b98\u7f51\u4e0b\u8f7d\u5b89\u88c5node.js: https://nodejs.org/en \u5feb\u901f\u5165\u95e8\uff1a vue.js --\u524d\u7aef\u6846\u67b6 \ud83d\udd17\u5f00\u59cb\u4f7f\u7528 Vue express.js --\u540e\u7aef\u6846\u67b6 \ud83d\udd17Express/Node \u5165\u95e8 \u8ddf\u968f\u6559\u7a0b\u4e00\u8def\u4e0b\u4e00\u9875\uff0c\u5b8c\u6210\u81ea\u5df1\u7684\u7b2c\u4e00\u4e2avue/express\u9879\u76ee","title":"Node.js"},{"location":"Web/node/#nodejs","text":"\u5728\u5b98\u7f51\u4e0b\u8f7d\u5b89\u88c5node.js: https://nodejs.org/en","title":"Node.js"},{"location":"Web/node/#_1","text":"","title":"\u5feb\u901f\u5165\u95e8\uff1a"},{"location":"Web/node/#vuejs-","text":"\ud83d\udd17\u5f00\u59cb\u4f7f\u7528 Vue","title":"vue.js --\u524d\u7aef\u6846\u67b6"},{"location":"Web/node/#expressjs-","text":"\ud83d\udd17Express/Node \u5165\u95e8 \u8ddf\u968f\u6559\u7a0b\u4e00\u8def\u4e0b\u4e00\u9875\uff0c\u5b8c\u6210\u81ea\u5df1\u7684\u7b2c\u4e00\u4e2avue/express\u9879\u76ee","title":"express.js --\u540e\u7aef\u6846\u67b6"}]}